<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin\Couponsets;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\Couponsets\CouponUrl;


/**
* Use the Coupons subresource to manage coupons within manual coupon sets.
*/
class CouponClient {

	/**
	* Retrieves the details of the specified coupon. Use the couponSetCode and the couponCode parameter to specify the coupon within a coupon set. Use the includeCounts paramter to specify whether to return the redemptionCount property in the response body object.
	*
	* @param string $couponCode Code associated with the coupon to remove from the cart.
	* @param string $couponSetCode The unique identifier of the coupon set that the coupon belongs to.
	* @param bool $includeCounts Specifies whether to return the redemptionCount property in the response body object.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return MozuClient
	*/
	public static function getCouponClient($couponSetCode, $couponCode, $includeCounts =  null, $responseFields =  null)
	{
		$url = CouponUrl::getCouponUrl($couponCode, $couponSetCode, $includeCounts, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a list of coupons in a specified coupon set according to any specified filter criteria and sort options.
	*
	* @param string $couponSetCode The unique identifier of the coupon set that the coupons belongs to.
	* @param string $filter A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for a list of supported filters.
	* @param bool $includeCounts Specifies whether to include the redemptionCount property in the response body object.
	* @param int $pageSize When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for more information.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.
	* @return MozuClient
	*/
	public static function getCouponsClient($couponSetCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $includeCounts =  null, $responseFields =  null)
	{
		$url = CouponUrl::getCouponsUrl($couponSetCode, $filter, $includeCounts, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Adds coupons  to a specified manual coupon set. Use the couponSetCode parameter to specify the manual coupon set.
	*
	* @param string $couponSetCode The unique identifier of the coupon set.
	* @param array|Coupon $coupons The details necessary to assign the discount to a coupon set, including .
	*/
	public static function addCouponsClient($coupons, $couponSetCode)
	{
		$url = CouponUrl::addCouponsUrl($couponSetCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($coupons);
		return $mozuClient;

	}
	
	/**
	* Deletes the specified coupons and removes them from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
	*
	* @param string $couponSetCode The unique identifier of the coupon set that the coupon belongs to.
	* @param array|string $couponCodes The unique identifiers of the coupons to delete.
	*/
	public static function deleteCouponsClient($couponCodes, $couponSetCode)
	{
		$url = CouponUrl::deleteCouponsUrl($couponSetCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($couponCodes);
		return $mozuClient;

	}
	
	/**
	* Deletes the specified coupon and remove it from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
	*
	* @param string $couponCode Code associated with the coupon to remove from the cart.
	* @param string $couponSetCode The unique identifier of the coupon set that the coupon belongs to.
	*/
	public static function deleteCouponClient($couponSetCode, $couponCode)
	{
		$url = CouponUrl::deleteCouponUrl($couponCode, $couponSetCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


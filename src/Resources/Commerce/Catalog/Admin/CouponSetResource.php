<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\CouponSetClient;
use Mozu\Api\ApiContext;


/**
* commerce/catalog/admin/couponsets related resources. DOCUMENT_HERE 
*/
class CouponSetResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* Returns a paged collection of CouponSets
	*
	* @param string $filter A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.
	* @param bool $includeCounts 
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=3`.
	* @return CouponSetCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getCouponSets($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $includeCounts =  null, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::getCouponSetsClient($startIndex, $pageSize, $sortBy, $filter, $includeCounts, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Returns a paged collection of CouponSets
	*
	* @param string $filter A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.
	* @param bool $includeCounts 
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=3`.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCouponSetsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $includeCounts =  null, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::getCouponSetsClient($startIndex, $pageSize, $sortBy, $filter, $includeCounts, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $couponSetCode 
	* @param bool $includeCounts 
	* @param string $responseFields 
	* @return CouponSet 
	* @deprecated deprecated since version 1.17
	*/
	public function getCouponSet($couponSetCode, $includeCounts =  null, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::getCouponSetClient($couponSetCode, $includeCounts, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $couponSetCode 
	* @param bool $includeCounts 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCouponSetAsync($couponSetCode, $includeCounts =  null, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::getCouponSetClient($couponSetCode, $includeCounts, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Returns a random 4 character code that is unique as a coupon set code.
	*
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @return string 
	* @deprecated deprecated since version 1.17
	*/
	public function getUniqueCouponSetCode($responseFields =  null)
	{
		$mozuClient = CouponSetClient::getUniqueCouponSetCodeClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Returns a random 4 character code that is unique as a coupon set code.
	*
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getUniqueCouponSetCodeAsync($responseFields =  null)
	{
		$mozuClient = CouponSetClient::getUniqueCouponSetCodeClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Adds a single
	*
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @param CouponSet $couponSet Mozu.ProductAdmin.Contracts.CouponSet ApiType DOCUMENT_HERE 
	* @return CouponSet 
	* @deprecated deprecated since version 1.17
	*/
	public function addCouponSet($couponSet, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::addCouponSetClient($couponSet, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Adds a single
	*
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addCouponSetAsync($couponSet, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::addCouponSetClient($couponSet, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Tests code for uniqueness and validity
	*
	* @param string $code User-defined code that uniqely identifies the channel group.
	* @deprecated deprecated since version 1.17
	*/
	public function validateUniqueCouponSetCode($code)
	{
		$mozuClient = CouponSetClient::validateUniqueCouponSetCodeClient($code);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Tests code for uniqueness and validity
	*
	* @param string $code User-defined code that uniqely identifies the channel group.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function validateUniqueCouponSetCodeAsync($code)
	{
		$mozuClient = CouponSetClient::validateUniqueCouponSetCodeClient($code);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $couponSetCode 
	* @param string $responseFields 
	* @param CouponSet $couponSet 
	* @return CouponSet 
	* @deprecated deprecated since version 1.17
	*/
	public function updateCouponSet($couponSet, $couponSetCode, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::updateCouponSetClient($couponSet, $couponSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $couponSetCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateCouponSetAsync($couponSet, $couponSetCode, $responseFields =  null)
	{
		$mozuClient = CouponSetClient::updateCouponSetClient($couponSet, $couponSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $couponSetCode 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteCouponSet($couponSetCode)
	{
		$mozuClient = CouponSetClient::deleteCouponSetClient($couponSetCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* 
	*
	* @param string $couponSetCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteCouponSetAsync($couponSetCode)
	{
		$mozuClient = CouponSetClient::deleteCouponSetClient($couponSetCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


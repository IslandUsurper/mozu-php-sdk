<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\PublishingScopeClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Product Publishing resource to publish or discard pending changes to products in a master catalog, or to add or remove pending changes to and from product publish sets.You can use product publish sets to group pending product changes together and publish them all at the same time.
*/
class PublishingScopeResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* Retrieves the details of the specified product publish set.
	*
	* @param string $publishSetCode The unique identifier of the publish set.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return PublishSet 
	* @deprecated deprecated since version 1.17
	*/
	public function getPublishSet($publishSetCode, $responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::getPublishSetClient($publishSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves the details of the specified product publish set.
	*
	* @param string $publishSetCode The unique identifier of the publish set.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPublishSetAsync($publishSetCode, $responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::getPublishSetClient($publishSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Retrieves a list of product publish sets and their properties, including the amount of pending product changes that are included in each one.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return PublishSetCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getPublishSets($responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::getPublishSetsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves a list of product publish sets and their properties, including the amount of pending product changes that are included in each one.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPublishSetsAsync($responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::getPublishSetsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes the draft version of product changes (pending product changes) for each product code specified in the request.
	*
	* @param PublishingScope $publishScope Describes the scope of the product publishing update, which can include individual product codes or all pending changes.
	* @deprecated deprecated since version 1.17
	*/
	public function discardDrafts($publishScope)
	{
		$mozuClient = PublishingScopeClient::discardDraftsClient($this->dataViewMode, $publishScope);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes the draft version of product changes (pending product changes) for each product code specified in the request.
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function discardDraftsAsync($publishScope)
	{
		$mozuClient = PublishingScopeClient::discardDraftsClient($this->dataViewMode, $publishScope);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Publishes the draft version of product changes (pending product changes) for each product code specified in the request, and changes the product publish state to "live".
	*
	* @param PublishingScope $publishScope Describes the scope of the product publishing update, which can include individual product codes or all pending changes.
	* @deprecated deprecated since version 1.17
	*/
	public function publishDrafts($publishScope)
	{
		$mozuClient = PublishingScopeClient::publishDraftsClient($this->dataViewMode, $publishScope);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Publishes the draft version of product changes (pending product changes) for each product code specified in the request, and changes the product publish state to "live".
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function publishDraftsAsync($publishScope)
	{
		$mozuClient = PublishingScopeClient::publishDraftsClient($this->dataViewMode, $publishScope);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Assigns pending product changes to a specified product publish set. Use the code field to specify the product publish set.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param PublishSet $publishSet The details of the publish to which you want to assign products.
	* @return PublishSet 
	* @deprecated deprecated since version 1.17
	*/
	public function assignProductsToPublishSet($publishSet, $responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::assignProductsToPublishSetClient($publishSet, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Assigns pending product changes to a specified product publish set. Use the code field to specify the product publish set.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function assignProductsToPublishSetAsync($publishSet, $responseFields =  null)
	{
		$mozuClient = PublishingScopeClient::assignProductsToPublishSetClient($publishSet, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes the specified product publish set. If you set the discardDrafts parameter to true, this operation also deletes the product drafts assigned to the publish set.
	*
	* @param bool $discardDrafts Specifies whether to discard all the drafts assigned to the publish set when the publish set is deleted.
	* @param string $publishSetCode The unique identifier of the publish set.
	* @deprecated deprecated since version 1.17
	*/
	public function deletePublishSet($publishSetCode, $discardDrafts =  null)
	{
		$mozuClient = PublishingScopeClient::deletePublishSetClient($publishSetCode, $discardDrafts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes the specified product publish set. If you set the discardDrafts parameter to true, this operation also deletes the product drafts assigned to the publish set.
	*
	* @param bool $discardDrafts Specifies whether to discard all the drafts assigned to the publish set when the publish set is deleted.
	* @param string $publishSetCode The unique identifier of the publish set.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deletePublishSetAsync($publishSetCode, $discardDrafts =  null)
	{
		$mozuClient = PublishingScopeClient::deletePublishSetClient($publishSetCode, $discardDrafts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


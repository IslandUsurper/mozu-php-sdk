<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\SoftAllocationClient;
use Mozu\Api\ApiContext;


/**
* Allows you to temporarily hold a product from inventory while a shopper is filling out payment information. You create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class SoftAllocationResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* Retrieves a list of sof allocations according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/applications/sorting-filtering.htm) for a list of supported filters.
	* @param int $pageSize When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/applications/sorting-filtering.htm) for more information.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.
	* @return SoftAllocationCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getSoftAllocations($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves a list of sof allocations according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/applications/sorting-filtering.htm) for a list of supported filters.
	* @param int $pageSize When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/applications/sorting-filtering.htm) for more information.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getSoftAllocationsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Retrieves the details of a soft allocation.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param int $softAllocationId The unique identifier of the soft allocation.
	* @return SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function getSoftAllocation($softAllocationId, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationClient($softAllocationId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves the details of a soft allocation.
	*
	* @param string $responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	* @param int $softAllocationId The unique identifier of the soft allocation.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getSoftAllocationAsync($softAllocationId, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationClient($softAllocationId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Creates a new product reservation for a product. This places a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param array|SoftAllocation $softAllocationsIn Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function addSoftAllocations($softAllocationsIn)
	{
		$mozuClient = SoftAllocationClient::addSoftAllocationsClient($softAllocationsIn);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Creates a new product reservation for a product. This places a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addSoftAllocationsAsync($softAllocationsIn)
	{
		$mozuClient = SoftAllocationClient::addSoftAllocationsClient($softAllocationsIn);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Converts a set of existing softAllocations into productReservations
	*
	* @param array|SoftAllocation $softAllocations Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|ProductReservation 
	* @deprecated deprecated since version 1.17
	*/
	public function convertToProductReservation($softAllocations)
	{
		$mozuClient = SoftAllocationClient::convertToProductReservationClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Converts a set of existing softAllocations into productReservations
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function convertToProductReservationAsync($softAllocations)
	{
		$mozuClient = SoftAllocationClient::convertToProductReservationClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Updates a set of softAllocations expiration time in a non trassactional batch
	*
	* @param SoftAllocationRenew $softAllocationRenew Mozu.ProductAdmin.Contracts.SoftAllocationRenew ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function renewSoftAllocations($softAllocationRenew)
	{
		$mozuClient = SoftAllocationClient::renewSoftAllocationsClient($softAllocationRenew);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Updates a set of softAllocations expiration time in a non trassactional batch
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function renewSoftAllocationsAsync($softAllocationRenew)
	{
		$mozuClient = SoftAllocationClient::renewSoftAllocationsClient($softAllocationRenew);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Updates a soft allocationt. This updates a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param array|SoftAllocation $softAllocations Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function updateSoftAllocations($softAllocations)
	{
		$mozuClient = SoftAllocationClient::updateSoftAllocationsClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Updates a soft allocationt. This updates a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateSoftAllocationsAsync($softAllocations)
	{
		$mozuClient = SoftAllocationClient::updateSoftAllocationsClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes a soft allocation. You might delete a allocation when an order or cart is not processed to return the product quantity back to inventory.
	*
	* @param int $softAllocationId The unique identifier of the soft allocation.
	* @deprecated deprecated since version 1.17
	*/
	public function deleteSoftAllocation($softAllocationId)
	{
		$mozuClient = SoftAllocationClient::deleteSoftAllocationClient($softAllocationId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes a soft allocation. You might delete a allocation when an order or cart is not processed to return the product quantity back to inventory.
	*
	* @param int $softAllocationId The unique identifier of the soft allocation.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteSoftAllocationAsync($softAllocationId)
	{
		$mozuClient = SoftAllocationClient::deleteSoftAllocationClient($softAllocationId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Discount used to calculate SalePrice. Includes coupon code if applicable, amount of the discount, and discount savings. Discounts can be either an absolute price or a percentage off. The sale price beats any discounts.
*/
class Discount
{
	/**
	*The integer amount of the discount. For example, an entry of "10" could represent a discount of $10.00 or a discount of 10%, depending on the type.
	*/
	public $Amount;
	public function getAmount() {
		return $this->Amount;
	}
	
	public function setAmount($amount) {
		$this->Amount = $amount;
		return $this;
	}

	/**
	*The type of discount amount, such as an amount or a percentage.
	*/
	public $AmountType;
	public function getAmountType() {
		return $this->AmountType;
	}
	
	public function setAmountType($amountType) {
		$this->AmountType = $amountType;
		return $this;
	}

	/**
	*Alphanumeric code associated with the coupon or promotion that results in a discounted price.
	*/
	public $CouponCode;
	public function getCouponCode() {
		return $this->CouponCode;
	}
	
	public function setCouponCode($couponCode) {
		$this->CouponCode = $couponCode;
		return $this;
	}

	/**
	*The most recent number of redeemed discounts.
	*/
	public $CurrentRedemptionCount;
	public function getCurrentRedemptionCount() {
		return $this->CurrentRedemptionCount;
	}
	
	public function setCurrentRedemptionCount($currentRedemptionCount) {
		$this->CurrentRedemptionCount = $currentRedemptionCount;
		return $this;
	}

	/**
	* The date when the order will no longer be active or considered abandoned. For example, if a guest or anonymous shoppper has 14 days of inactivity, the order is considered abandoned after that period of inactivity. An order never expires for shoppers who are logged into their account. Date in UTC Date/Time. System-supplied and read-only.
	*/
	public $ExpirationDate;
	public function getExpirationDate() {
		return $this->ExpirationDate;
	}
	
	public function setExpirationDate($expirationDate) {
		$this->ExpirationDate = $expirationDate;
		return $this;
	}

	/**
	*Unique identifier of the discount.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*The maximum number of discount redemptions accepted.
	*/
	public $MaxRedemptionCount;
	public function getMaxRedemptionCount() {
		return $this->MaxRedemptionCount;
	}
	
	public function setMaxRedemptionCount($maxRedemptionCount) {
		$this->MaxRedemptionCount = $maxRedemptionCount;
		return $this;
	}

	/**
	*If true, a coupon code entry is required to redeem the discount.
	*/
	public $RequiresCoupon;
	public function getRequiresCoupon() {
		return $this->RequiresCoupon;
	}
	
	public function setRequiresCoupon($requiresCoupon) {
		$this->RequiresCoupon = $requiresCoupon;
		return $this;
	}

	/**
	*The scope to which the discount applies, which is "Order" for order discounts or "LineItem" for individual product discounts.
	*/
	public $Scope;
	public function getScope() {
		return $this->Scope;
	}
	
	public function setScope($scope) {
		$this->Scope = $scope;
		return $this;
	}

	/**
	*Date when the product discount goes into effect. System-supplied and read-only.
	*/
	public $StartDate;
	public function getStartDate() {
		return $this->StartDate;
	}
	
	public function setStartDate($startDate) {
		$this->StartDate = $startDate;
		return $this;
	}

	/**
	*Current status of the product discount. Possible values are "Active", "Scheduled", or "Expired".
	*/
	public $Status;
	public function getStatus() {
		return $this->Status;
	}
	
	public function setStatus($status) {
		$this->Status = $status;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*Complex type that contains content for a language specified by LocaleCode.
	*/
	public $Content;
	public function getContent() {
		return $this->Content;
	}
	
	public function setContent($content) {
		$this->Content = $content;
		return $this;
	}

	/**
	*Properties of the target object to which the discount applies, such as a product or an order.
	*/
	public $Target;
	public function getTarget() {
		return $this->Target;
	}
	
	public function setTarget($target) {
		$this->Target = $target;
		return $this;
	}

}

?>

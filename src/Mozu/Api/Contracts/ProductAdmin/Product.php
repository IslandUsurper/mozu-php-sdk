<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Properties of the product such as product code, product name, and product price.
*/
class Product
{
	/**
	*Merchant-generated product code for the product that any variation stems from.
	*/
	public $BaseProductCode;
	public function getBaseProductCode() {
		return $this->BaseProductCode;
	}
	
	public function setBaseProductCode($baseProductCode) {
		$this->BaseProductCode = $baseProductCode;
		return $this;
	}

	/**
	*If true, the product has configurable options. This option means that a product is not purchasable until the shopper selects options that resolve into a product variation. Configurable options for a product are the choices a shopper makes when ordering a product. Size and color are configurable options. System-supplied and read-only.
	*/
	public $HasConfigurableOptions;
	public function getHasConfigurableOptions() {
		return $this->HasConfigurableOptions;
	}
	
	public function setHasConfigurableOptions($hasConfigurableOptions) {
		$this->HasConfigurableOptions = $hasConfigurableOptions;
		return $this;
	}

	/**
	*If true, this product has stand alone options that a shopper can select which can exist without product variations. Stand alone options. System-supplied and read-only.
	*/
	public $HasStandAloneOptions;
	public function getHasStandAloneOptions() {
		return $this->HasStandAloneOptions;
	}
	
	public function setHasStandAloneOptions($hasStandAloneOptions) {
		$this->HasStandAloneOptions = $hasStandAloneOptions;
		return $this;
	}

	/**
	*If true, a shopper can order the product when it is out of stock through the site, but can get the product once it is available again in inventory or through dropshipping.
	*/
	public $IsBackOrderAllowed;
	public function getIsBackOrderAllowed() {
		return $this->IsBackOrderAllowed;
	}
	
	public function setIsBackOrderAllowed($isBackOrderAllowed) {
		$this->IsBackOrderAllowed = $isBackOrderAllowed;
		return $this;
	}

	/**
	*If true, the product does not appear on the storefront when it is not in stock. If false, the product stays on the storefront even when it is out of stock.
	*/
	public $IsHiddenWhenOutOfStock;
	public function getIsHiddenWhenOutOfStock() {
		return $this->IsHiddenWhenOutOfStock;
	}
	
	public function setIsHiddenWhenOutOfStock($isHiddenWhenOutOfStock) {
		$this->IsHiddenWhenOutOfStock = $isHiddenWhenOutOfStock;
		return $this;
	}

	/**
	*If true, the product must be packaged on its own and should not be jointly packaged with other products.
	*/
	public $IsPackagedStandAlone;
	public function getIsPackagedStandAlone() {
		return $this->IsPackagedStandAlone;
	}
	
	public function setIsPackagedStandAlone($isPackagedStandAlone) {
		$this->IsPackagedStandAlone = $isPackagedStandAlone;
		return $this;
	}

	/**
	*If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	public $IsRecurring;
	public function getIsRecurring() {
		return $this->IsRecurring;
	}
	
	public function setIsRecurring($isRecurring) {
		$this->IsRecurring = $isRecurring;
		return $this;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	public $IsTaxable;
	public function getIsTaxable() {
		return $this->IsTaxable;
	}
	
	public function setIsTaxable($isTaxable) {
		$this->IsTaxable = $isTaxable;
		return $this;
	}

	/**
	*If true, the entity is valid for the product type provided.
	*/
	public $IsValidForProductType;
	public function getIsValidForProductType() {
		return $this->IsValidForProductType;
	}
	
	public function setIsValidForProductType($isValidForProductType) {
		$this->IsValidForProductType = $isValidForProductType;
		return $this;
	}

	/**
	*If true, the product in this request is a product variation of a product that has configurable options. System-supplied and read-only.
	*/
	public $IsVariation;
	public function getIsVariation() {
		return $this->IsVariation;
	}
	
	public function setIsVariation($isVariation) {
		$this->IsVariation = $isVariation;
		return $this;
	}

	/**
	*If true, the Products services will manage inventory for this product.
	*/
	public $ManageStock;
	public function getManageStock() {
		return $this->ManageStock;
	}
	
	public function setManageStock($manageStock) {
		$this->ManageStock = $manageStock;
		return $this;
	}

	/**
	*Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	*/
	public $ProductCode;
	public function getProductCode() {
		return $this->ProductCode;
	}
	
	public function setProductCode($productCode) {
		$this->ProductCode = $productCode;
		return $this;
	}

		public $ProductSequence;
	public function getProductSequence() {
		return $this->ProductSequence;
	}
	
	public function setProductSequence($productSequence) {
		$this->ProductSequence = $productSequence;
		return $this;
	}

	/**
	*Identifier of the product type.
	*/
	public $ProductTypeId;
	public function getProductTypeId() {
		return $this->ProductTypeId;
	}
	
	public function setProductTypeId($productTypeId) {
		$this->ProductTypeId = $productTypeId;
		return $this;
	}

	/**
	*Identifier of the shipping class.
	*/
	public $ShippingClassId;
	public function getShippingClassId() {
		return $this->ShippingClassId;
	}
	
	public function setShippingClassId($shippingClassId) {
		$this->ShippingClassId = $shippingClassId;
		return $this;
	}

		public $SiteGroupId;
	public function getSiteGroupId() {
		return $this->SiteGroupId;
	}
	
	public function setSiteGroupId($siteGroupId) {
		$this->SiteGroupId = $siteGroupId;
		return $this;
	}

	/**
	*If the product must be packaged separately, the type of standalone package to use.
	*/
	public $StandAlonePackageType;
	public function getStandAlonePackageType() {
		return $this->StandAlonePackageType;
	}
	
	public function setStandAlonePackageType($standAlonePackageType) {
		$this->StandAlonePackageType = $standAlonePackageType;
		return $this;
	}

	/**
	*The number of products accounted for in inventory that are available for purchase.
	*/
	public $StockAvailable;
	public function getStockAvailable() {
		return $this->StockAvailable;
	}
	
	public function setStockAvailable($stockAvailable) {
		$this->StockAvailable = $stockAvailable;
		return $this;
	}

	/**
	*The number of products that are unavailable for current purchase, but placed on back order so that the shopper's order can still be fulfilled, for example, by dropshipping or just waiting for stock to be available again.
	*/
	public $StockOnBackOrder;
	public function getStockOnBackOrder() {
		return $this->StockOnBackOrder;
	}
	
	public function setStockOnBackOrder($stockOnBackOrder) {
		$this->StockOnBackOrder = $stockOnBackOrder;
		return $this;
	}

	/**
	*The number of products currently available in inventory.
	*/
	public $StockOnHand;
	public function getStockOnHand() {
		return $this->StockOnHand;
	}
	
	public function setStockOnHand($stockOnHand) {
		$this->StockOnHand = $stockOnHand;
		return $this;
	}

	/**
	*The universal product code (UPC code) of the product.
	*/
	public $UPC;
	public function getUPC() {
		return $this->UPC;
	}
	
	public function setUPC($uPC) {
		$this->UPC = $uPC;
		return $this;
	}

	/**
	*System-generated key that represents the attribute values that uniquely identify a specific product variation.
	*/
	public $VariationKey;
	public function getVariationKey() {
		return $this->VariationKey;
	}
	
	public function setVariationKey($variationKey) {
		$this->VariationKey = $variationKey;
		return $this;
	}

	/**
	*List of discounts available for a product.
	*/
	public $ApplicableDiscounts;
	public function getApplicableDiscounts() {
		return $this->ApplicableDiscounts;
	}
	
	public function setApplicableDiscounts($applicableDiscounts) {
		$this->ApplicableDiscounts = $applicableDiscounts;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*Product content set in product admin.
	*/
	public $Content;
	public function getContent() {
		return $this->Content;
	}
	
	public function setContent($content) {
		$this->Content = $content;
		return $this;
	}

	/**
	*The list of extras set up in product admin.
	*/
	public $Extras;
	public function getExtras() {
		return $this->Extras;
	}
	
	public function setExtras($extras) {
		$this->Extras = $extras;
		return $this;
	}

	/**
	*The list of options set up in product admin.
	*/
	public $Options;
	public function getOptions() {
		return $this->Options;
	}
	
	public function setOptions($options) {
		$this->Options = $options;
		return $this;
	}

	/**
	*Height of the package in imperial units of feet and inches.
	*/
	public $PackageHeight;
	public function getPackageHeight() {
		return $this->PackageHeight;
	}
	
	public function setPackageHeight($packageHeight) {
		$this->PackageHeight = $packageHeight;
		return $this;
	}

	/**
	*Length of the package in imperial units of feet and inches.
	*/
	public $PackageLength;
	public function getPackageLength() {
		return $this->PackageLength;
	}
	
	public function setPackageLength($packageLength) {
		$this->PackageLength = $packageLength;
		return $this;
	}

	/**
	*Weight of the package in imperial units of pounds and ounces.
	*/
	public $PackageWeight;
	public function getPackageWeight() {
		return $this->PackageWeight;
	}
	
	public function setPackageWeight($packageWeight) {
		$this->PackageWeight = $packageWeight;
		return $this;
	}

	/**
	*Width of the package in imperial units of feet and inches.
	*/
	public $PackageWidth;
	public function getPackageWidth() {
		return $this->PackageWidth;
	}
	
	public function setPackageWidth($packageWidth) {
		$this->PackageWidth = $packageWidth;
		return $this;
	}

		public $Price;
	public function getPrice() {
		return $this->Price;
	}
	
	public function setPrice($price) {
		$this->Price = $price;
		return $this;
	}

	/**
	*List of products that belong to a specific site ID.
	*/
	public $ProductInSites;
	public function getProductInSites() {
		return $this->ProductInSites;
	}
	
	public function setProductInSites($productInSites) {
		$this->ProductInSites = $productInSites;
		return $this;
	}

	/**
	*The list of product properties to set in product admin.
	*/
	public $Properties;
	public function getProperties() {
		return $this->Properties;
	}
	
	public function setProperties($properties) {
		$this->Properties = $properties;
		return $this;
	}

		public $PublishingInfo;
	public function getPublishingInfo() {
		return $this->PublishingInfo;
	}
	
	public function setPublishingInfo($publishingInfo) {
		$this->PublishingInfo = $publishingInfo;
		return $this;
	}

	/**
	*search engine optimized product content.
	*/
	public $SEOContent;
	public function getSEOContent() {
		return $this->SEOContent;
	}
	
	public function setSEOContent($sEOContent) {
		$this->SEOContent = $sEOContent;
		return $this;
	}

	/**
	*The change made to the number of products currently available in inventory.
	*/
	public $StockOnHandAdjustment;
	public function getStockOnHandAdjustment() {
		return $this->StockOnHandAdjustment;
	}
	
	public function setStockOnHandAdjustment($stockOnHandAdjustment) {
		$this->StockOnHandAdjustment = $stockOnHandAdjustment;
		return $this;
	}

	/**
	*The list of product variation options that exist in product admin.
	*/
	public $VariationOptions;
	public function getVariationOptions() {
		return $this->VariationOptions;
	}
	
	public function setVariationOptions($variationOptions) {
		$this->VariationOptions = $variationOptions;
		return $this;
	}

}

?>

<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\CommerceRuntime\Payments;



/**
*	Properties of a payment transaction submitted for an order.
*/
class Payment
{
	/**
	*The total monetary amount collected in this payment transaction for the order.
	*/
	public $AmountCollected;
	public function getAmountCollected() {
		return $this->AmountCollected;
	}
	
	public function setAmountCollected($amountCollected) {
		$this->AmountCollected = $amountCollected;
		return $this;
	}

	/**
	*If the payment transaction is a shopper credit, the total monetary amount credited in this payment transaction for the order.
	*/
	public $AmountCredited;
	public function getAmountCredited() {
		return $this->AmountCredited;
	}
	
	public function setAmountCredited($amountCredited) {
		$this->AmountCredited = $amountCredited;
		return $this;
	}

	/**
	*The actions a user can perform for a payment at this time.
	*/
	public $AvailableActions;
	public function getAvailableActions() {
		return $this->AvailableActions;
	}
	
	public function setAvailableActions($availableActions) {
		$this->AvailableActions = $availableActions;
		return $this;
	}

	/**
	*Unique identifier of the payment transaction.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*If true, the payment transaction occurs at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	public $IsRecurring;
	public function getIsRecurring() {
		return $this->IsRecurring;
	}
	
	public function setIsRecurring($isRecurring) {
		$this->IsRecurring = $isRecurring;
		return $this;
	}

	/**
	*Unique identifier of the order associated with the payment.
	*/
	public $OrderId;
	public function getOrderId() {
		return $this->OrderId;
	}
	
	public function setOrderId($orderId) {
		$this->OrderId = $orderId;
		return $this;
	}

	/**
	*The transaction ID supplied by the payment service to associate with this order payment.
	*/
	public $PaymentServiceTransactionId;
	public function getPaymentServiceTransactionId() {
		return $this->PaymentServiceTransactionId;
	}
	
	public function setPaymentServiceTransactionId($paymentServiceTransactionId) {
		$this->PaymentServiceTransactionId = $paymentServiceTransactionId;
		return $this;
	}

	/**
	*The type of payment transaction performed, either check or credit card. Paypal and additional payment types will be supported in a future release.
	*/
	public $PaymentType;
	public function getPaymentType() {
		return $this->PaymentType;
	}
	
	public function setPaymentType($paymentType) {
		$this->PaymentType = $paymentType;
		return $this;
	}

	/**
	*Current status of the payment transaction for the order.
	*/
	public $Status;
	public function getStatus() {
		return $this->Status;
	}
	
	public function setStatus($status) {
		$this->Status = $status;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*The billing information associates with this payment.
	*/
	public $BillingInfo;
	public function getBillingInfo() {
		return $this->BillingInfo;
	}
	
	public function setBillingInfo($billingInfo) {
		$this->BillingInfo = $billingInfo;
		return $this;
	}

	/**
	*Container for the interactions associated with the payment, which includes details for each action performed for the payment.
	*/
	public $Interactions;
	public function getInteractions() {
		return $this->Interactions;
	}
	
	public function setInteractions($interactions) {
		$this->Interactions = $interactions;
		return $this;
	}

}

?>

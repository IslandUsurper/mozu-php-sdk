<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\Core\Extensible;



/**
*	The properties of the attribute to extend for either customers or orders.
*/
class Attribute
{
	/**
	*Name of this extensible attribute in Mozu Admin.
	*/
	public $AdminName;
	public function getAdminName() {
		return $this->AdminName;
	}
	
	public function setAdminName($adminName) {
		$this->AdminName = $adminName;
		return $this;
	}

	/**
	*Merchant-defined code for an extensible attribute.
	*/
	public $AttributeCode;
	public function getAttributeCode() {
		return $this->AttributeCode;
	}
	
	public function setAttributeCode($attributeCode) {
		$this->AttributeCode = $attributeCode;
		return $this;
	}

		public $AttributeFQN;
	public function getAttributeFQN() {
		return $this->AttributeFQN;
	}
	
	public function setAttributeFQN($attributeFQN) {
		$this->AttributeFQN = $attributeFQN;
		return $this;
	}

	/**
	*The data type of the attribute. There are four valid data types: "Bool", "DateTime", "Number", "String"
	*/
	public $DataType;
	public function getDataType() {
		return $this->DataType;
	}
	
	public function setDataType($dataType) {
		$this->DataType = $dataType;
		return $this;
	}

	/**
	*Unique identifier of the extensible attribute.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*There are six valid input types: "YesNo", "Date", "DateTime", "List", "TextBox", "TextArea"
	*/
	public $InputType;
	public function getInputType() {
		return $this->InputType;
	}
	
	public function setInputType($inputType) {
		$this->InputType = $inputType;
		return $this;
	}

	/**
	*If true, the customer or order attribute is active.
	*/
	public $IsActive;
	public function getIsActive() {
		return $this->IsActive;
	}
	
	public function setIsActive($isActive) {
		$this->IsActive = $isActive;
		return $this;
	}

	/**
	*Namespace associated with this extensible attribute.
	*/
	public $Namespace;
	public function getNamespace() {
		return $this->Namespace;
	}
	
	public function setNamespace($namespace) {
		$this->Namespace = $namespace;
		return $this;
	}

	/**
	*List of metadata defined for an extensible attribute.
	*/
	public $AttributeMetadata;
	public function getAttributeMetadata() {
		return $this->AttributeMetadata;
	}
	
	public function setAttributeMetadata($attributeMetadata) {
		$this->AttributeMetadata = $attributeMetadata;
		return $this;
	}

		public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*List of localized content properties for the extensible attribute.
	*/
	public $Content;
	public function getContent() {
		return $this->Content;
	}
	
	public function setContent($content) {
		$this->Content = $content;
		return $this;
	}

	/**
	*Properties used when validating a value entered for an extensible attribute.
	*/
	public $Validation;
	public function getValidation() {
		return $this->Validation;
	}
	
	public function setValidation($validation) {
		$this->Validation = $validation;
		return $this;
	}

	/**
	*List of valid vocabulary values defined for an attribute.
	*/
	public $VocabularyValues;
	public function getVocabularyValues() {
		return $this->VocabularyValues;
	}
	
	public function setVocabularyValues($vocabularyValues) {
		$this->VocabularyValues = $vocabularyValues;
		return $this;
	}

}

?>

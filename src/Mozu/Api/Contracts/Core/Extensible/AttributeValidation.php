<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\Core\Extensible;



class AttributeValidation
{
	/**
	*The latest possible date and time the extensible attribute can be validated.
	*/
	public $MaxDateTime;
	public function getMaxDateTime() {
		return $this->MaxDateTime;
	}
	
	public function setMaxDateTime($maxDateTime) {
		$this->MaxDateTime = $maxDateTime;
		return $this;
	}

	/**
	*The maximum number that can be entered as a value for an extensible attribute.
	*/
	public $MaxNumericValue;
	public function getMaxNumericValue() {
		return $this->MaxNumericValue;
	}
	
	public function setMaxNumericValue($maxNumericValue) {
		$this->MaxNumericValue = $maxNumericValue;
		return $this;
	}

	/**
	*The maximum length possible for a string value entered for an extensible attribute.
	*/
	public $MaxStringLength;
	public function getMaxStringLength() {
		return $this->MaxStringLength;
	}
	
	public function setMaxStringLength($maxStringLength) {
		$this->MaxStringLength = $maxStringLength;
		return $this;
	}

	/**
	*The earliest date and time an extensible attribute can be validated.
	*/
	public $MinDateTime;
	public function getMinDateTime() {
		return $this->MinDateTime;
	}
	
	public function setMinDateTime($minDateTime) {
		$this->MinDateTime = $minDateTime;
		return $this;
	}

	/**
	*The minimum numeric value required to validate an extensible attribute.
	*/
	public $MinNumericValue;
	public function getMinNumericValue() {
		return $this->MinNumericValue;
	}
	
	public function setMinNumericValue($minNumericValue) {
		$this->MinNumericValue = $minNumericValue;
		return $this;
	}

	/**
	*The maximum length possible for a string value entered for an extensible attribute.
	*/
	public $MinStringLength;
	public function getMinStringLength() {
		return $this->MinStringLength;
	}
	
	public function setMinStringLength($minStringLength) {
		$this->MinStringLength = $minStringLength;
		return $this;
	}

	/**
	*Regular expression used to validate the extensible attribute value.
	*/
	public $RegularExpression;
	public function getRegularExpression() {
		return $this->RegularExpression;
	}
	
	public function setRegularExpression($regularExpression) {
		$this->RegularExpression = $regularExpression;
		return $this;
	}

}

?>

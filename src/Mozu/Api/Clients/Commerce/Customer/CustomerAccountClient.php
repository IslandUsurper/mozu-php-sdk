<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\CustomerAccountUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
*/
class CustomerAccountClient {

	/**
	* Retrieves a list of customer accounts.
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param bool $isAnonymous 
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getAccountsClient($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null)
	{
		$url = CustomerAccountUrl::getAccountsUrl($fields, $filter, $isAnonymous, $pageSize, $q, $qLimit, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieve details of a customer account.
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @return MozuClient
	*/
	public static function getAccountClient($accountId)
	{
		$url = CustomerAccountUrl::getAccountUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @return MozuClient
	*/
	public static function getLoginStateClient($accountId)
	{
		$url = CustomerAccountUrl::getLoginStateUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Creates a new customer account based on the information specified in the request.
	*
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return MozuClient
	*/
	public static function addAccountClient($account)
	{
		$url = CustomerAccountUrl::addAccountUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($account);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param PasswordInfo $passwordInfo 
	*/
	public static function changePasswordClient($passwordInfo, $accountId)
	{
		$url = CustomerAccountUrl::changePasswordUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($passwordInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param CustomerLoginInfo $customerAuthInfo 
	* @return MozuClient
	*/
	public static function addLoginToExistingCustomerClient($customerAuthInfo, $accountId)
	{
		$url = CustomerAccountUrl::addLoginToExistingCustomerUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($customerAuthInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	*/
	public static function recomputeCustomerLifetimeValueClient($accountId)
	{
		$url = CustomerAccountUrl::recomputeCustomerLifetimeValueUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isLocked 
	*/
	public static function setLoginLockedClient($isLocked, $accountId)
	{
		$url = CustomerAccountUrl::setLoginLockedUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($isLocked);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isPasswordChangeRequired 
	*/
	public static function setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId)
	{
		$url = CustomerAccountUrl::setPasswordChangeRequiredUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($isPasswordChangeRequired);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo 
	* @return MozuClient
	*/
	public static function addAccountAndLoginClient($accountAndAuthInfo)
	{
		$url = CustomerAccountUrl::addAccountAndLoginUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($accountAndAuthInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param array|CustomerAccountAndAuthInfo $customers 
	* @return MozuClient
	*/
	public static function addAccountsClient($customers)
	{
		$url = CustomerAccountUrl::addAccountsUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($customers);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $emailAddress 
	* @return MozuClient
	*/
	public static function getLoginStateByEmailAddressClient($emailAddress)
	{
		$url = CustomerAccountUrl::getLoginStateByEmailAddressUrl($emailAddress);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $userName 
	* @return MozuClient
	*/
	public static function getLoginStateByUserNameClient($userName)
	{
		$url = CustomerAccountUrl::getLoginStateByUserNameUrl($userName);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param ResetPasswordInfo $resetPasswordInfo 
	*/
	public static function resetPasswordClient($resetPasswordInfo)
	{
		$url = CustomerAccountUrl::resetPasswordUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($resetPasswordInfo);
		return $mozuClient;

	}
	
	/**
	* Updates a customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return MozuClient
	*/
	public static function updateAccountClient($account, $accountId)
	{
		$url = CustomerAccountUrl::updateAccountUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($account);
		return $mozuClient;

	}
	
	/**
	* Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	*/
	public static function deleteAccountClient($accountId)
	{
		$url = CustomerAccountUrl::deleteAccountUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer\Accounts;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\Accounts\CustomerGroupUrl;

/**
* Use the groups subresource to manage customer accounts in groups. The groups are useful to manage sets of customers. A customer account can belong to several groups or none at all.
*/
class CustomerGroupClient {

	/**
	* Retrieve a list of customer groups associated with the customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getAccountGroupsClient($accountId, $filter, $pageSize, $sortBy, $startIndex)
	{
		$url = CustomerGroupUrl::getAccountGroupsUrl($accountId, $filter, $pageSize, $sortBy, $startIndex);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves details of a customer account in a group.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $groupId Unique identifier of the customer group.
	* @return MozuClient
	*/
	public static function getAccountGroupClient($accountId, $groupId)
	{
		$url = CustomerGroupUrl::getAccountGroupUrl($accountId, $groupId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Adds a customer account to a group.
	*
	* @param int $accountId Unique identifier of the customer account to add to a group.
	* @param int $groupId Unique identifier of the customer group to add the customer to.
	* @return MozuClient
	*/
	public static function addAccountGroupClient($accountId, $groupId)
	{
		$url = CustomerGroupUrl::addAccountGroupUrl($accountId, $groupId);
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Removes a customer account from a group.
	*
	* @param int $accountId Unique identifier of the customer account to remove from the group.
	* @param int $groupId Unique identifier of the customer group.
	*/
	public static function deleteAccountGroupClient($accountId, $groupId)
	{
		$url = CustomerGroupUrl::deleteAccountGroupUrl($accountId, $groupId);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


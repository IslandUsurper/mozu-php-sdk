<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\CartUrl;

/**
* Use the Carts resource to manage storefront shopping carts as items are added and removed. Each time a shopper's cart is modified, the Carts resource updates estimated prices, discounts, tax, and shipping.
*/
class CartClient {

	/**
	* Retrieve a cart specified by its cart ID.
	*
	* @param string $cartId Identifier of the cart being retrieved.
	* @return MozuClient
	*/
	public static function getCartClient($cartId)
	{
		$url = CartUrl::getCartUrl($cartId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a cart's contents for the current shopper. If the shopper does not have an active cart on the site, the service creates one.
	*
	* @return MozuClient
	*/
	public static function getOrCreateCartClient()
	{
		$url = CartUrl::getOrCreateCartUrl();
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves the number of items in the active cart and the status of the cart such as whether or not it has expired. Only an anonymous user's cart (guest that does not log in) that is emptied and idle will expire after 14 days. Note that the expiration counter is renewed each time action is made to the cart. For shoppers or users that are logged in, the cart does not expire.
	*
	* @return MozuClient
	*/
	public static function getCartSummaryClient()
	{
		$url = CartUrl::getCartSummaryUrl();
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieve a user's cart by specifying the user ID.
	*
	* @param string $userId Unique identifier of the user whose cart you want to retrieve.
	* @return MozuClient
	*/
	public static function getUserCartClient($userId)
	{
		$url = CartUrl::getUserCartUrl($userId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves the current status of the specified user's cart, including the number of items in the active cart.
	*
	* @param string $userId Unique identifier of the user whose cart details you want to retrieve.
	* @return MozuClient
	*/
	public static function getUserCartSummaryClient($userId)
	{
		$url = CartUrl::getUserCartSummaryUrl($userId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Update the current shopper's cart.
	*
	* @param Cart $cart All of the properties of the cart to update. The product code is required.
	* @return MozuClient
	*/
	public static function updateCartClient($cart)
	{
		$url = CartUrl::updateCartUrl();
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($cart);
		return $mozuClient;

	}
	
	/**
	* Delete the cart specified by its cart ID.
	*
	* @param string $cartId Identifier of the cart being deleted.
	*/
	public static function deleteCartClient($cartId)
	{
		$url = CartUrl::deleteCartUrl($cartId);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Deletes the cart of the currently active shopper.
	*
	*/
	public static function deleteCurrentCartClient()
	{
		$url = CartUrl::deleteCurrentCartUrl();
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\OrderUrl;

/**
* Manage order processing, payment, and shipping. Includes getting customer payment details, shipping address and selected shipment method, processing payment transactions, and, once paid, shipping the order to the shopper.
*/
class OrderClient {

	/**
	* Retrieves a list of orders according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter an order's search results by any of its properties, including status, contact information, or total. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). <b>For example - "filter=Status+eq+Submitted"</b>
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $q A list of order search terms to use in the query when searching across order number and the name or email of the billing contact. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getOrdersClient($filter, $pageSize, $q, $qLimit, $sortBy, $startIndex)
	{
		$url = OrderUrl::getOrdersUrl($filter, $pageSize, $q, $qLimit, $sortBy, $startIndex);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves available order actions which depends on the status of the order. Actions are "CreateOrder," "SubmitOrder," "SetOrderAsProcessing," "CloseOrder," or "CancelOrder."
	*
	* @param string $orderId Unique identifier of the available order actions to get.
	* @return MozuClient
	*/
	public static function getAvailableActionsClient($orderId)
	{
		$url = OrderUrl::getAvailableActionsUrl($orderId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves the details of an order specified by the order ID.
	*
	* @param bool $draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	* @param string $orderId Unique identifier of the order details to get.
	* @return MozuClient
	*/
	public static function getOrderClient($draft, $orderId)
	{
		$url = OrderUrl::getOrderUrl($draft, $orderId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Creates a new order for no-cart quick-ordering scenarios.
	*
	* @param Order $order All properties of the order to place.
	* @return MozuClient
	*/
	public static function createOrderClient($order)
	{
		$url = OrderUrl::createOrderUrl();
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($order);
		return $mozuClient;

	}
	
	/**
	* Creates a new order from an existing cart when the customer chooses to proceed to checkout.
	*
	* @param string $cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID.
	* @return MozuClient
	*/
	public static function createOrderFromCartClient($cartId)
	{
		$url = OrderUrl::createOrderFromCartUrl($cartId);
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Perform the specified action for an order. Available actions depend on the current status of the order. When in doubt, first get a list of available order actions.
	*
	* @param string $orderId Unique identifier of the order.
	* @param OrderAction $action Action to perform, which can be "CreateOrder," "SubmitOrder," "SetOrderAsProcessing," "CloseOrder," or "CancelOrder."
	* @return MozuClient
	*/
	public static function performOrderActionClient($orderId, $action)
	{
		$url = OrderUrl::performOrderActionUrl($orderId);
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($action);
		return $mozuClient;

	}
	
	/**
	* Update the properties of a discount applied to an order.
	*
	* @param int $discountId Unique identifier of the discount. System-supplied and read only.
	* @param string $orderId Unique identifier of the order discount. System-supplied and read only.
	* @param string $updateMode Specifies whether to modify the discount by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version If applicable, the version of the order or draft for which to update the discount.
	* @param AppliedDiscount $discount Properties of the order discount to update.
	* @return MozuClient
	*/
	public static function updateOrderDiscountClient($discountId, $orderId, $updateMode, $version, $discount)
	{
		$url = OrderUrl::updateOrderDiscountUrl($discountId, $orderId, $updateMode, $version);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($discount);
		return $mozuClient;

	}
	
	/**
	* Deletes the current draft version of the order, which also deletes any uncommitted changes made to the order in draft mode.
	*
	* @param string $orderId Unique identifier of the order associated with the draft to delete.
	* @param string $version If applicable, the version of the order draft to delete.
	*/
	public static function deleteOrderDraftClient($orderId, $version)
	{
		$url = OrderUrl::deleteOrderDraftUrl($orderId, $version);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @return MozuClient
	*/
	public static function changeOrderUserIdClient($orderId)
	{
		$url = OrderUrl::changeOrderUserIdUrl($orderId);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Updates the specified order when additional order information, such as shipping or billing information, is modified during the checkout process.
	*
	* @param string $orderId Unique identifier of the order to update.
	* @param string $updateMode Specifies whether to update the original order, update the order in draft mode, or update the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version If applicable, the version of the order or draft to update.
	* @param Order $order The properties of the order to update.
	* @return MozuClient
	*/
	public static function updateOrderClient($orderId, $updateMode, $version, $order)
	{
		$url = OrderUrl::updateOrderUrl($orderId, $updateMode, $version);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($order);
		return $mozuClient;

	}
	
	
}

?>


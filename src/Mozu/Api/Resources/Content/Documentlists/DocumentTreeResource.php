<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Content\Documentlists;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Content\Documentlists\DocumentTreeClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* Use the document tree subresource to retrieve documents and manage content within the document hierarchy.
*/
class DocumentTreeResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieve the content associated with the document, such as a product image or PDF specifications file.
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
	* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @param string $publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	*/
	public function getTreeDocumentContent($documentListName, $documentName, $folderId, $folderPath, $publishState)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentContentClient($documentListName, $documentName, $folderId, $folderPath, $publishState);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Retrieves a document based on its document list and folder path in the document hierarchy.
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
	* @param string $folderPath If applicable, the path of the folder hierarchy location that contains the document.
	* @param string $publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Document 
	*/
	public function getTreeDocument($documentListName, $documentName, $folderId, $folderPath, $publishState)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentClient($documentListName, $documentName, $folderId, $folderPath, $publishState);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
	* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
	*/
	public function updateTreeDocumentContent($documentListName, $documentName, $folderId, $folderPath)
	{
		$mozuClient = DocumentTreeClient::updateTreeDocumentContentClient($documentListName, $documentName, $folderId, $folderPath);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Deletes the content associated with a document, such as a product image or PDF specifications file.
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
	* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
	*/
	public function deleteTreeDocumentContent($documentListName, $documentName, $folderId, $folderPath)
	{
		$mozuClient = DocumentTreeClient::deleteTreeDocumentContentClient($documentListName, $documentName, $folderId, $folderPath);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Content;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Content\PropertyTypeClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the property types subresource to manage content properties.
*/
class PropertyTypeResource {

		private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of the content property types.
	*
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return PropertyTypeCollection 
	*/
	public function getPropertyTypes($dataViewMode, $pageSize =  null, $startIndex =  null, $responseFields =  null)
	{
		$mozuClient = PropertyTypeClient::getPropertyTypesClient($dataViewMode, $pageSize, $startIndex, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the details of the content property type.
	*
	* @param string $propertyTypeName The name of the content property type.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return PropertyType 
	*/
	public function getPropertyType($dataViewMode, $propertyTypeName, $responseFields =  null)
	{
		$mozuClient = PropertyTypeClient::getPropertyTypeClient($dataViewMode, $propertyTypeName, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param PropertyType $propertyType 
	* @return PropertyType 
	*/
	public function createPropertyType($propertyType, $responseFields =  null)
	{
		$mozuClient = PropertyTypeClient::createPropertyTypeClient($propertyType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $propertyTypeName 
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param PropertyType $propertyType 
	* @return PropertyType 
	*/
	public function updatePropertyType($dataViewMode, $propertyType, $propertyTypeName, $responseFields =  null)
	{
		$mozuClient = PropertyTypeClient::updatePropertyTypeClient($dataViewMode, $propertyType, $propertyTypeName, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $propertyTypeName 
	*/
	public function deletePropertyType($dataViewMode, $propertyTypeName)
	{
		$mozuClient = PropertyTypeClient::deletePropertyTypeClient($dataViewMode, $propertyTypeName);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


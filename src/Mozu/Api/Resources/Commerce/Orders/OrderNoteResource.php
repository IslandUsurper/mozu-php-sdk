<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\Clients\Commerce\Orders\OrderNoteClient;
use Mozu\Api\ApiContext;


/**
* Use the Order Notes subresource to manage merchant-level notes associated with an active order.
*/
class OrderNoteResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* Retrieves a list of all notes for an order.
	*
	* @param string $orderId Unique identifier of the order.
	* @return array|OrderNote 
	* @deprecated deprecated since version 1.17
	*/
	public function getOrderNotes($orderId)
	{
		$mozuClient = OrderNoteClient::getOrderNotesClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves a list of all notes for an order.
	*
	* @param string $orderId Unique identifier of the order.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getOrderNotesAsync($orderId)
	{
		$mozuClient = OrderNoteClient::getOrderNotesClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Retrieves the details of a specific order note.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return OrderNote 
	* @deprecated deprecated since version 1.17
	*/
	public function getOrderNote($orderId, $noteId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::getOrderNoteClient($orderId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves the details of a specific order note.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getOrderNoteAsync($orderId, $noteId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::getOrderNoteClient($orderId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Creates a new merchant note for the specified order.
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param OrderNote $orderNote Properties of an order note for a merchant, which is internal only for administrative purposes and not available to the shopper.
	* @return OrderNote 
	* @deprecated deprecated since version 1.17
	*/
	public function createOrderNote($orderNote, $orderId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::createOrderNoteClient($orderNote, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Creates a new merchant note for the specified order.
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createOrderNoteAsync($orderNote, $orderId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::createOrderNoteClient($orderNote, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Updates a specific note for an order.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param OrderNote $orderNote Properties of an order note for a merchant, which is internal only for administrative purposes and not available to the shopper.
	* @return OrderNote 
	* @deprecated deprecated since version 1.17
	*/
	public function updateOrderNote($orderNote, $orderId, $noteId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::updateOrderNoteClient($orderNote, $orderId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Updates a specific note for an order.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateOrderNoteAsync($orderNote, $orderId, $noteId, $responseFields =  null)
	{
		$mozuClient = OrderNoteClient::updateOrderNoteClient($orderNote, $orderId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes the specified order note.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @deprecated deprecated since version 1.17
	*/
	public function deleteOrderNote($orderId, $noteId)
	{
		$mozuClient = OrderNoteClient::deleteOrderNoteClient($orderId, $noteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes the specified order note.
	*
	* @param string $noteId Unique identifier of a particular note to retrieve.
	* @param string $orderId Unique identifier of the order.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteOrderNoteAsync($orderId, $noteId)
	{
		$mozuClient = OrderNoteClient::deleteOrderNoteClient($orderId, $noteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


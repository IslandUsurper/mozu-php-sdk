<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CustomerContactClient;
use Mozu\Api\ApiContext;


/**
* Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
*/
class CustomerContactResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* Retrieves the specified contact for a customer account such as a billing or shipping contact.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountContact($accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactClient($accountId, $contactId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves the specified contact for a customer account such as a billing or shipping contact.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountContactAsync($accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactClient($accountId, $contactId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerContactCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountContacts($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactsClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountContactsAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactsClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Creates a new contact for a customer account such as a new shipping address.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerContact $contact Contact information, including the contact's name, address, phone numbers, email addresses, and company (if supplied). Also indicates whether this is a billing, shipping, or billing and shipping contact.
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountContact($contact, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactClient($contact, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Creates a new contact for a customer account such as a new shipping address.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountContactAsync($contact, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactClient($contact, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Updates a contact for a specified customer account such as to update addresses or change which contact is the primary contact for billing.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerContact $contact Contact information, including the contact's name, address, phone numbers, email addresses, and company (if supplied). Also indicates whether this is a billing, shipping, or billing and shipping contact.
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccountContact($contact, $accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::updateAccountContactClient($contact, $accountId, $contactId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Updates a contact for a specified customer account such as to update addresses or change which contact is the primary contact for billing.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountContactAsync($contact, $accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::updateAccountContactClient($contact, $accountId, $contactId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes a contact for the specified customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccountContact($accountId, $contactId)
	{
		$mozuClient = CustomerContactClient::deleteAccountContactClient($accountId, $contactId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes a contact for the specified customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountContactAsync($accountId, $contactId)
	{
		$mozuClient = CustomerContactClient::deleteAccountContactClient($accountId, $contactId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


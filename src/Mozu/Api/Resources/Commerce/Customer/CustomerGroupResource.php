<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Customer\CustomerGroupClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* Merchants create, view, update and delete groups. Groups are useful to manage sets of customers, for example, to offer discounts to particular groups or assign VIP status to a set of customers. A customer account can have several groups or none at all.
*/
class CustomerGroupResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return CustomerGroupCollection 
	*/
	public function getGroups($filter, $pageSize, $sortBy, $startIndex)
	{
		$mozuClient = CustomerGroupClient::getGroupsClient($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the name of a customer group specified the customer group ID.
	*
	* @param int $groupId Identifier of the customer group to retrieve.
	* @return CustomerGroup 
	*/
	public function getGroup($groupId)
	{
		$mozuClient = CustomerGroupClient::getGroupClient($groupId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new customer group. New customer groups do not have any associated customer accounts.
	*
	* @param CustomerGroup $customerGroup Properties of the customer group to create.
	* @return CustomerGroup 
	*/
	public function addGroup($customerGroup)
	{
		$mozuClient = CustomerGroupClient::addGroupClient($customerGroup);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Changes the name of an existing customer group.
	*
	* @param int $groupId Identifier of the customer group to update.
	* @param CustomerGroup $customerGroup New name of the customer group.
	* @return CustomerGroup 
	*/
	public function updateGroup($groupId, $customerGroup)
	{
		$mozuClient = CustomerGroupClient::updateGroupClient($groupId, $customerGroup);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a customer group specified by its unique identifier. Deleting a group removes any customer account associations, but does not delete the customer account itself.
	*
	* @param int $groupId Identifier of the customer group to delete.
	*/
	public function deleteGroup($groupId)
	{
		$mozuClient = CustomerGroupClient::deleteGroupClient($groupId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\SoftAllocationClient;
use Mozu\Api\ApiContext;

/**
* Allows you to temporarily hold a product from inventory while a shopper is filling out payment information. You create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class SoftAllocationResource {

	private $apiContext;
		
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* Retrieves a list of sof allocations according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @param string $sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=3`.
	* @return SoftAllocationCollection 
	*/
	public function getSoftAllocations($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the details of a soft allocation.
	*
	* @param string $responseFields A list or array of fields returned for a call. These fields may be customized and may be used for various types of data calls in Mozu. For example, responseFields are returned for retrieving or updating attributes, carts, and messages in Mozu.
	* @param int $softAllocationId 
	* @return SoftAllocation 
	*/
	public function getSoftAllocation($softAllocationId, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationClient($softAllocationId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new product reservation for a product. This places a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param array|SoftAllocation $softAllocationsIn Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	*/
	public function addSoftAllocations($softAllocationsIn)
	{
		$mozuClient = SoftAllocationClient::addSoftAllocationsClient($softAllocationsIn);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Converts a set of existing softAllocations into productReservations
	*
	* @param array|SoftAllocation $softAllocations Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|ProductReservation 
	*/
	public function convertToProductReservation($softAllocations)
	{
		$mozuClient = SoftAllocationClient::convertToProductReservationClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates a set of softAllocations expiration time in a non trassactional batch
	*
	* @param SoftAllocationRenew $softAllocationRenew Mozu.ProductAdmin.Contracts.SoftAllocationRenew ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	*/
	public function renewSoftAllocations($softAllocationRenew)
	{
		$mozuClient = SoftAllocationClient::renewSoftAllocationsClient($softAllocationRenew);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates a soft allocationt. This updates a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param array|SoftAllocation $softAllocations Mozu.ProductAdmin.Contracts.SoftAllocation ApiType DOCUMENT_HERE 
	* @return array|SoftAllocation 
	*/
	public function updateSoftAllocations($softAllocations)
	{
		$mozuClient = SoftAllocationClient::updateSoftAllocationsClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a soft allocation. You might delete a allocation when an order or cart is not processed to return the product quantity back to inventory.
	*
	* @param int $softAllocationId 
	*/
	public function deleteSoftAllocation($softAllocationId)
	{
		$mozuClient = SoftAllocationClient::deleteSoftAllocationClient($softAllocationId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


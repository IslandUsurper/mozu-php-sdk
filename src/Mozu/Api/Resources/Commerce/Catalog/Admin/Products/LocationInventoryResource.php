<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin\Products;

use Mozu\Api\Clients\Commerce\Catalog\Admin\Products\LocationInventoryClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Product Location Inventory resource to manage the levels of active product inventory to maintain across defined locations at the product level.
*/
class LocationInventoryResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* Retrieves all locations for which a product has inventory defined and displays the inventory definition properties of each location.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return LocationInventoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventories($productCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $productCode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves all locations for which a product has inventory defined and displays the inventory definition properties of each location.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoriesAsync($productCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $productCode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Retrieves the details of the inventory of the product in the location specified in the request.
	*
	* @param string $locationCode The unique, user-defined code that identifies a location. 
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventory($productCode, $locationCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $productCode, $locationCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Retrieves the details of the inventory of the product in the location specified in the request.
	*
	* @param string $locationCode The unique, user-defined code that identifies a location. 
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoryAsync($productCode, $locationCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $productCode, $locationCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Creates a new location inventory definition for the product code specified in the request.
	*
	* @param bool $performUpserts Query string parameter lets the service perform an update for a new or existing record. When run, the update occurs without throwing a conflict exception that the record exists. If true, the updates completes regardless of the record currently existing. By default, if no value is specified, the service assumes this value is false.
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param array|LocationInventory $locationInventoryList Properties of an inventory definition that defines the level of inventory for a specific product at a given location.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function addLocationInventory($locationInventoryList, $productCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $productCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Creates a new location inventory definition for the product code specified in the request.
	*
	* @param bool $performUpserts Query string parameter lets the service perform an update for a new or existing record. When run, the update occurs without throwing a conflict exception that the record exists. If true, the updates completes regardless of the record currently existing. By default, if no value is specified, the service assumes this value is false.
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addLocationInventoryAsync($locationInventoryList, $productCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $productCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Updates the current level of stock at each location associated with the product code specified in the request.
	*
	* @param string $productCode The unique, user-defined product code of a product, used throughout Mozu to reference and associate to a product.
	* @param array|LocationInventoryAdjustment $locationInventoryAdjustments Properties of an adjustment to the active product inventory of a specific location.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function updateLocationInventory($locationInventoryAdjustments, $productCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Updates the current level of stock at each location associated with the product code specified in the request.
	*
	* @param string $productCode The unique, user-defined product code of a product, used throughout Mozu to reference and associate to a product.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateLocationInventoryAsync($locationInventoryAdjustments, $productCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes the location inventory definition for the product code specified in the request.
	*
	* @param string $locationCode The unique, user-defined code that identifies a location. 
	* @param string $productCode The unique, user-defined product code of a product, used throughout Mozu to reference and associate to a product.
	* @deprecated deprecated since version 1.17
	*/
	public function deleteLocationInventory($productCode, $locationCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $productCode, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
/**
	* Deletes the location inventory definition for the product code specified in the request.
	*
	* @param string $locationCode The unique, user-defined code that identifies a location. 
	* @param string $productCode The unique, user-defined product code of a product, used throughout Mozu to reference and associate to a product.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteLocationInventoryAsync($productCode, $locationCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $productCode, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


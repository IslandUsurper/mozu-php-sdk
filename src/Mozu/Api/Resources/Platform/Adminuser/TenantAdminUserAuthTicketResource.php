<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Platform\Adminuser;

use Mozu\Api\Clients\Platform\Adminuser\TenantAdminUserAuthTicketClient;
use Mozu\Api\ApiContext;


/**
* Use the Admin User authentication tickets resource to generate and refresh authentication tickets that enable Mozu administrator or developer account users to access development or production tenants.
*/
class TenantAdminUserAuthTicketResource {

				



	/**
	* Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param int $tenantId Unique identifier of the development or production tenant for which to generate the user authentication ticket.
	* @param UserAuthInfo $userAuthInfo Information required to authenticate a user.
	* @return TenantAdminUserAuthTicket 
	* @deprecated deprecated since version 1.17
	*/
	public function createUserAuthTicket($userAuthInfo, $tenantId =  null, $responseFields =  null)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::createUserAuthTicketClient($userAuthInfo, $tenantId, $responseFields);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param int $tenantId Unique identifier of the development or production tenant for which to generate the user authentication ticket.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createUserAuthTicketAsync($userAuthInfo, $tenantId =  null, $responseFields =  null)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::createUserAuthTicketClient($userAuthInfo, $tenantId, $responseFields);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param int $tenantId 
	* @param TenantAdminUserAuthTicket $existingAuthTicket Properties of the authentication ticket to be used in user claims with the Mozu API.
	* @return TenantAdminUserAuthTicket 
	* @deprecated deprecated since version 1.17
	*/
	public function refreshAuthTicket($existingAuthTicket, $tenantId =  null, $responseFields =  null)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::refreshAuthTicketClient($existingAuthTicket, $tenantId, $responseFields);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param int $tenantId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function refreshAuthTicketAsync($existingAuthTicket, $tenantId =  null, $responseFields =  null)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::refreshAuthTicketClient($existingAuthTicket, $tenantId, $responseFields);
		return $mozuClient->executeAsync();

	}
	
	/**
	* Deletes the authentication ticket for the user by supplying the refresh token.
	*
	* @param string $refreshToken Alphanumeric string used for access tokens. This token refreshes access for accounts by generating a new developer or application account authentication ticket after an access token expires.
	* @deprecated deprecated since version 1.17
	*/
	public function deleteUserAuthTicket($refreshToken)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::deleteUserAuthTicketClient($refreshToken);
		$mozuClient->execute();

	}
	
/**
	* Deletes the authentication ticket for the user by supplying the refresh token.
	*
	* @param string $refreshToken Alphanumeric string used for access tokens. This token refreshes access for accounts by generating a new developer or application account authentication ticket after an access token expires.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteUserAuthTicketAsync($refreshToken)
	{
		$mozuClient = TenantAdminUserAuthTicketClient::deleteUserAuthTicketClient($refreshToken);
		return $mozuClient->executeAsync();

	}
	
	
}

?>


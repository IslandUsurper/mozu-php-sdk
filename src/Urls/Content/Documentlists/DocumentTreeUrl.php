<?php

/*
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Urls\Content\Documentlists;

use Mozu\Api\MozuUrl;
use Mozu\Api\UrlLocation;

class DocumentTreeUrl  {

	/**
		* Get Resource Url for GetTreeDocumentContent
		* @param string $documentListName Name of content documentListName to delete
		* @param string $documentName The name of the document in the site.
		* @return string Resource Url
	*/
	public static function getTreeDocumentContentUrl($documentListName, $documentName)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content";
		$mozuUrl = new MozuUrl($url, UrlLocation::TENANT_POD,"GET", false) ;
		$url = $mozuUrl->formatUrl("documentListName", $documentListName);
		$url = $mozuUrl->formatUrl("documentName", $documentName);
		return $mozuUrl;
	}
	
	/**
		* Get Resource Url for TransformTreeDocumentContent
		* @param string $crop Crops the image based on the specified coordinates. The reference point for positive coordinates is the top-left corner of the image, and the reference point for negative coordinates is the bottom-right corner of the image.Usage: Example:  removes 10 pixels from all edges of the image.  leaves the image uncropped.
		* @param string $documentListName Name of content documentListName to delete
		* @param string $documentName The name of the document in the site.
		* @param int $height Specifies an exact height dimension for the image, in pixels.
		* @param int $max Specifies a pixel limitation for the largest side of an image.
		* @param int $maxHeight Specifies a pixel limitation for the height of the image, preserving the aspect ratio if the image needs resizing.
		* @param int $maxWidth Specifies a pixel limitation for the width of the image, preserving the aspect ratio if the image needs resizing.
		* @param int $quality Adjusts the image compression. Accepts values from 0-100, where 100 = highest quality, least compression.
		* @param int $width Specifies an exact width dimension for the image, in pixels.
		* @return string Resource Url
	*/
	public static function transformTreeDocumentContentUrl($crop, $documentListName, $documentName, $height, $max, $maxHeight, $maxWidth, $quality, $width)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/transform?width={width}&height={height}&maxWidth={maxWidth}&maxHeight={maxHeight}&crop={crop}&quality={quality}";
		$mozuUrl = new MozuUrl($url, UrlLocation::TENANT_POD,"GET", false) ;
		$url = $mozuUrl->formatUrl("crop", $crop);
		$url = $mozuUrl->formatUrl("documentListName", $documentListName);
		$url = $mozuUrl->formatUrl("documentName", $documentName);
		$url = $mozuUrl->formatUrl("height", $height);
		$url = $mozuUrl->formatUrl("max", $max);
		$url = $mozuUrl->formatUrl("maxHeight", $maxHeight);
		$url = $mozuUrl->formatUrl("maxWidth", $maxWidth);
		$url = $mozuUrl->formatUrl("quality", $quality);
		$url = $mozuUrl->formatUrl("width", $width);
		return $mozuUrl;
	}
	
	/**
		* Get Resource Url for GetTreeDocument
		* @param string $documentListName Name of content documentListName to delete
		* @param string $documentName The name of the document in the site.
		* @param bool $includeInactive Include inactive content.
		* @param string $responseFields Use this field to include those fields which are not included by default.
		* @return string Resource Url
	*/
	public static function getTreeDocumentUrl($documentListName, $documentName, $includeInactive, $responseFields)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}?includeInactive={includeInactive}&responseFields={responseFields}";
		$mozuUrl = new MozuUrl($url, UrlLocation::TENANT_POD,"GET", false) ;
		$url = $mozuUrl->formatUrl("documentListName", $documentListName);
		$url = $mozuUrl->formatUrl("documentName", $documentName);
		$url = $mozuUrl->formatUrl("includeInactive", $includeInactive);
		$url = $mozuUrl->formatUrl("responseFields", $responseFields);
		return $mozuUrl;
	}
	
	/**
		* Get Resource Url for UpdateTreeDocumentContent
		* @param string $documentListName Name of content documentListName to delete
		* @param string $documentName The name of the document in the site.
		* @return string Resource Url
	*/
	public static function updateTreeDocumentContentUrl($documentListName, $documentName)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content?folderPath={folderPath}&folderId={folderId}";
		$mozuUrl = new MozuUrl($url, UrlLocation::TENANT_POD,"PUT", false) ;
		$url = $mozuUrl->formatUrl("documentListName", $documentListName);
		$url = $mozuUrl->formatUrl("documentName", $documentName);
		return $mozuUrl;
	}
	
	/**
		* Get Resource Url for DeleteTreeDocumentContent
		* @param string $documentListName Name of content documentListName to delete
		* @param string $documentName The name of the document in the site.
		* @return string Resource Url
	*/
	public static function deleteTreeDocumentContentUrl($documentListName, $documentName)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content?folderPath={folderPath}&folderId={folderId}";
		$mozuUrl = new MozuUrl($url, UrlLocation::TENANT_POD,"DELETE", false) ;
		$url = $mozuUrl->formatUrl("documentListName", $documentListName);
		$url = $mozuUrl->formatUrl("documentName", $documentName);
		return $mozuUrl;
	}
	
}

?>


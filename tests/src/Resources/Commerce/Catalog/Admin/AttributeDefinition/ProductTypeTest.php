<?php

use GuzzleHttp\Promise;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Resources\Commerce\Catalog\Admin\Attributedefinition\ProductTypeResource;
use Mozu\Api\Contracts\ProductAdmin\ProductType;

use Mozu\Api\Resources\Platform\TenantResource;
use Mozu\Tests\BaseTest;

/**
 * Test class for ProductResource.
 * Generated by PHPUnit on 2013-09-25 at 15:38:56.
 */
class ProductTypeResourceTest extends BaseTest
{
    /**
     * @var ProductResource
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        printf("Getting tenant");
        $tenantResource = new TenantResource();
        $tenantPromise = $tenantResource->getTenantAsync($this->tenantId);
        $tenantPromise->then(function($mozuResult) {
            $apiContext = new ApiContext($mozuResult->json());
            $this->object = new ProductTypeResource($apiContext, DataViewMode::LIVE);
        }, function($apiException) {
            parent::printError($apiException);
            throw $apiException;
        });

        $tenantPromise->wait();

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Mozu\Api\Resources\Commerce\Catalog\Admin\ProductResource::getProducts
     * @todo Implement testGetProducts().
     */
    public function testAddProductTypeAsync()
    {
        $apiContext = new ApiContext($this->tenantId, 0, 1, 1);
        //$type_resource = new ProductTypeResource($apiContext, DataViewMode::LIVE);

        $product_type = new ProductType();
        $product_type->goodsType = 'Physical';
        $product_type->masterCatalogId = 1;
        $product_type->productUsages = array('Standard', 'Configurable', 'Component');
        $product_type->name = "test3";
        $product_type->isBaseProductType = False;

        $result = $this->object->addProductTypeAsync($product_type)->wait();
        var_dump($result);
    }


}
?>

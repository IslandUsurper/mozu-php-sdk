<?php
require_once __DIR__ . '/../../../../../../BaseTest.php';

use Mozu\Tests\BaseTest;
use Mozu\Api\Resources\Commerce\Catalog\Admin\ProductResource;
use Mozu\Api\Resources\Platform\TenantResource;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use GuzzleHttp\Promise;

/**
 * Test class for ProductResource.
 * Generated by PHPUnit on 2013-09-25 at 15:38:56.
 */
class ProductResourceTest extends BaseTest
{
    /**
     * @var ProductResource
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        printf("Getting tenant");
    	$tenantResource = new TenantResource();
    	$tenantPromise = $tenantResource->getTenantAsync($this->tenantId);
    	$tenantPromise->then(function($mozuResult) {
            $apiContext = new ApiContext($mozuResult->json());
            $this->object = new ProductResource($apiContext, DataViewMode::LIVE);
        }, function($apiException) {
            parent::printError($apiException);
            throw $apiException;
        });

        $tenantPromise->wait();

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Mozu\Api\Resources\Commerce\Catalog\Admin\ProductResource::getProducts
     * @todo Implement testGetProducts().
     */
    public function testGetProductsAsync()
    {
        $promises = [
            "product1" => $this->object->getProductAsync("AIRMOTION-SCIENCES-BSF09"),
            "product2" => $this->object->getProductAsync("AIRMOTION-SCIENCES-BSF12"),
            "product3" => $this->object->getProductAsync("AIRMOTION-SCIENCES-BSF15")
        ];

        $results = Promise\unwrap($promises);

        $this->assertSame($results["product1"]->json()->productCode,"AIRMOTION-SCIENCES-BSF09" );
        $this->assertSame($results["product2"]->json()->productCode,"AIRMOTION-SCIENCES-BSF12" );
        $this->assertSame($results["product3"]->json()->productCode,"AIRMOTION-SCIENCES-BSF15" );
    }

    
}
?>

<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Returns;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Returns\PackageClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* Use the return packages subresource to manage packages used to ship return replacement items.
*/
class PackageResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves the details of a package of return replacement items.
	*
	* @param string $packageId Unique identifier of the return replacement package to retrieve.
	* @param string $returnId Unique identifier of the return associated with the replacement package to retrieve.
	* @return Package 
	*/
	public function getPackage($packageId, $returnId)
	{
		$mozuClient = PackageClient::getPackageClient($packageId, $returnId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the package label image supplied by the carrier for a return replacement.
	*
	* @param string $packageId Unique identifier of the return replacement package for which to retrieve the label.
	* @param string $returnId Unique identifier of the return associated with the replacement package label to retrieve.
	*/
	public function getPackageLabel($packageId, $returnId)
	{
		$mozuClient = PackageClient::getPackageLabelClient($packageId, $returnId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Creates a new physical package of return replacement items.
	*
	* @param string $returnId Unique identifier of the return for which to create a replacement package.
	* @param Package $package Properties of the physical package for a return replacement.
	* @return Package 
	*/
	public function createPackage($returnId, $pkg)
	{
		$mozuClient = PackageClient::createPackageClient($returnId, $pkg);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates one or more properties of a package associated with a return replacement.
	*
	* @param string $packageId Unique identifier of the return replacement package to update.
	* @param string $returnId Unique identifier of the return associated with the replacement package to update.
	* @param Package $package Properties of the return replacement package to update.
	* @return Package 
	*/
	public function updatePackage($packageId, $returnId, $pkg)
	{
		$mozuClient = PackageClient::updatePackageClient($packageId, $returnId, $pkg);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a package associated with a return replacement.
	*
	* @param string $packageId Unique identifier of the return replacement package to delete.
	* @param string $returnId Unique identifier of the return associated with the replacement package to delete.
	*/
	public function deletePackage($packageId, $returnId)
	{
		$mozuClient = PackageClient::deletePackageClient($packageId, $returnId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


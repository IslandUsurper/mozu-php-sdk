<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin\Attributedefinition\Producttypes;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Catalog\Admin\Attributedefinition\Producttypes\ProductTypePropertyClient;
use Mozu\Api\ApiContext;

/**
* Collection of the attributes that are properties in this product type.
*/
class ProductTypePropertyResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of product properties that belong to a product type.
	*
	* @param int $productTypeId Identifier of the product type whose properties are being retrieved as a paged list.
	* @return array|AttributeInProductType 
	*/
	public function getProperties($dataViewMode,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypePropertyClient::getPropertiesClient($dataViewMode,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the single property by providing the property ID and the attribute's user-defined fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose single instance of a property is being retrieved.
	* @return AttributeInProductType 
	*/
	public function getProperty($dataViewMode,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypePropertyClient::getPropertyClient($dataViewMode,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Adds or creates the attribute which exists as properties in the product type.
	*
	* @param int $productTypeId Identifier of the product type whose properties are being added or created to the product type.
	* @param AttributeInProductType $attributeInProductType The attribute in product type refers to the specific product attribute that is being created to exist as a property only available in the product type template.
	* @return AttributeInProductType 
	*/
	public function addProperty($dataViewMode, $attributeInProductType,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypePropertyClient::addPropertyClient($dataViewMode, $attributeInProductType,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates the single property by providing the property ID and the attribute's user-defined fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose single instance of a property is being updated.
	* @param AttributeInProductType $attributeInProductType The properties of the attribute (that exist as properties) are being updated.
	* @return AttributeInProductType 
	*/
	public function updateProperty($dataViewMode, $attributeInProductType,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypePropertyClient::updatePropertyClient($dataViewMode, $attributeInProductType,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes the property by providing the attribute's user-defined fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose properties are being deleted.
	*/
	public function deleteProperty($dataViewMode,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypePropertyClient::deletePropertyClient($dataViewMode,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


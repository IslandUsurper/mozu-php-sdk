<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin\Attributedefinition\Producttypes;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Catalog\Admin\Attributedefinition\Producttypes\ProductTypeOptionClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Add or create, delete, retrieve, and update product types that exist as options.
*/
class ProductTypeOptionResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of product attributes that exist as options by specifying the product type ID.
	*
	* @param int $productTypeId Identifier of the product type options to retrieve.
	* @return array|AttributeInProductType 
	*/
	public function getOptions($dataViewMode, $productTypeId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = ProductTypeOptionClient::getOptionsClient($dataViewMode, $productTypeId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves a single product attribute that exists as an option by providing the product type ID and the attribute's fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId The identifier of the product option type of the option being retrieved.
	* @return AttributeInProductType 
	*/
	public function getOption($dataViewMode, $productTypeId, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = ProductTypeOptionClient::getOptionClient($dataViewMode, $productTypeId, $attributeFQN, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Adds or creates the attribute which exists as an option.
	*
	* @param int $productTypeId Identifier of the product type where an attribute which exists as an option is being added.
	* @param AttributeInProductType $attributeInProductType Adds or creates the attribute which exists as an option to the product type.
	* @return AttributeInProductType 
	*/
	public function addOption($dataViewMode, $attributeInProductType, $productTypeId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = ProductTypeOptionClient::addOptionClient($dataViewMode, $attributeInProductType, $productTypeId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates the product attribute that exists as an option.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose attribute that exists as an option to update.
	* @param AttributeInProductType $attributeInProductType Updates the attribute which exist as options in the product type.
	* @return AttributeInProductType 
	*/
	public function updateOption($dataViewMode, $attributeInProductType, $productTypeId, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = ProductTypeOptionClient::updateOptionClient($dataViewMode, $attributeInProductType, $productTypeId, $attributeFQN, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes the product option by providing the product type ID and the attribute's fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type option to delete.
	*/
	public function deleteOption($dataViewMode, $productTypeId, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = ProductTypeOptionClient::deleteOptionClient($dataViewMode, $productTypeId, $attributeFQN, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


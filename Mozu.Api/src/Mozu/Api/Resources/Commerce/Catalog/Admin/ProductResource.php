<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Catalog\Admin\ProductClient;
use Mozu\Api\ApiContext;

/**
* 
*/
class ProductResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* 
	*
	* @param string $filter 
	* @param bool $noCount 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ProductCollection 
	*/
	public function getProducts($dataViewMode, $filter =  null, $noCount =  null, $pageSize =  null, $q =  null, $qLimit =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::getProductsClient($dataViewMode, $filter, $noCount, $pageSize, $q, $qLimit, $sortBy, $startIndex, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return Product 
	*/
	public function getProduct($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::getProductClient($dataViewMode,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return array|ProductInCatalogInfo 
	*/
	public function getProductInCatalogs($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::getProductInCatalogsClient($dataViewMode,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @return ProductInCatalogInfo 
	*/
	public function getProductInCatalog($dataViewMode,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::getProductInCatalogClient($dataViewMode,  $catalogId,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param Product $product 
	* @return Product 
	*/
	public function addProduct($dataViewMode, $product, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::addProductClient($dataViewMode, $product, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param ProductInCatalogInfo $productInCatalogInfoIn 
	* @return ProductInCatalogInfo 
	*/
	public function addProductInCatalog($dataViewMode, $productInCatalogInfoIn,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::addProductInCatalogClient($dataViewMode, $productInCatalogInfoIn,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param Product $product 
	* @return Product 
	*/
	public function updateProduct($dataViewMode, $product,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::updateProductClient($dataViewMode, $product,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param array|ProductInCatalogInfo $productInCatalogsIn 
	* @return array|ProductInCatalogInfo 
	*/
	public function updateProductInCatalogs($dataViewMode, $productInCatalogsIn,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::updateProductInCatalogsClient($dataViewMode, $productInCatalogsIn,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param ProductInCatalogInfo $productInCatalogInfoIn 
	* @return ProductInCatalogInfo 
	*/
	public function updateProductInCatalog($dataViewMode, $productInCatalogInfoIn,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::updateProductInCatalogClient($dataViewMode, $productInCatalogInfoIn,  $catalogId,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	*/
	public function deleteProduct($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::deleteProductClient($dataViewMode,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	*/
	public function deleteProductInCatalog($dataViewMode,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductClient::deleteProductInCatalogClient($dataViewMode,  $catalogId,  $productCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Catalog\Admin\ProductReservationClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class ProductReservationResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	*
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param int $pageSize Used to create paged results from a query. Specifies the number of results to display on each page. Maximum: 200.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ProductReservationCollection 
	*/
	public function getProductReservations($dataViewMode, $filter =  null, $pageSize =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::getProductReservationsClient($dataViewMode, $filter, $pageSize, $sortBy, $startIndex, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the details of a product reservation.
	*
	* @param int $productReservationId Unique identifier of the product reservation.
	* @return ProductReservation 
	*/
	public function getProductReservation($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::getProductReservationClient($dataViewMode,  $productReservationId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param bool $skipInventoryCheck 
	* @param array|ProductReservation $productReservations 
	* @return array|ProductReservation 
	*/
	public function addProductReservations($dataViewMode, $productReservations, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::addProductReservationsClient($dataViewMode, $productReservations, $skipInventoryCheck, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param array|ProductReservation $productReservations 
	*/
	public function commitReservations($dataViewMode, $productReservations, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::commitReservationsClient($dataViewMode, $productReservations, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param bool $skipInventoryCheck 
	* @param array|ProductReservation $productReservations 
	* @return array|ProductReservation 
	*/
	public function updateProductReservations($dataViewMode, $productReservations, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::updateProductReservationsClient($dataViewMode, $productReservations, $skipInventoryCheck, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a product reservation. For example, delete a reservation when an order is not processed to return the product quantity back to inventory.
	*
	* @param int $productReservationId Unique identifier of the reservation.
	*/
	public function deleteProductReservation($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductReservationClient::deleteProductReservationClient($dataViewMode,  $productReservationId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


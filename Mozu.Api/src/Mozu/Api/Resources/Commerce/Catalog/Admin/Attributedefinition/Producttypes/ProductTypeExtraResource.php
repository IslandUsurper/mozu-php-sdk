<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin\Attributedefinition\Producttypes;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Catalog\Admin\Attributedefinition\Producttypes\ProductTypeExtraClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Collection of the attributes that are extras in this product type.
*/
class ProductTypeExtraResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of extras by providing the product type ID.
	*
	* @param int $productTypeId Identifier of the product type whose list is being retrieved.
	* @return array|AttributeInProductType 
	*/
	public function getExtras($dataViewMode,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypeExtraClient::getExtrasClient($dataViewMode,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves an extra by providing the attribute's FQN and product type ID.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose extra is being retrieved.
	* @return AttributeInProductType 
	*/
	public function getExtra($dataViewMode,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypeExtraClient::getExtraClient($dataViewMode,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Add or create an extra.
	*
	* @param int $productTypeId Identifier of the product type to add an extra.
	* @param AttributeInProductType $attributeInProductType The properties of the attribute in product type to add or create extras.
	* @return AttributeInProductType 
	*/
	public function addExtra($dataViewMode, $attributeInProductType,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypeExtraClient::addExtraClient($dataViewMode, $attributeInProductType,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Update an extra by providing the attribute's FQN and product type ID.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose extra is being updated.
	* @param AttributeInProductType $attributeInProductType The properties of the attribute in product type to update. The attributes exist as extras.
	* @return AttributeInProductType 
	*/
	public function updateExtra($dataViewMode, $attributeInProductType,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypeExtraClient::updateExtraClient($dataViewMode, $attributeInProductType,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Delete an extra.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param int $productTypeId Identifier of the product type whose extra is being deleted.
	*/
	public function deleteExtra($dataViewMode,  $attributeFQN,  $productTypeId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = ProductTypeExtraClient::deleteExtraClient($dataViewMode,  $attributeFQN,  $productTypeId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


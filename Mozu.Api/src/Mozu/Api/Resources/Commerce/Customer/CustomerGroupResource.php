<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Customer\CustomerGroupClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Groups resource to manage customer groups that enable a merchant to manage sets of customers and target discounts for these groups. After a customer group is defined, you can associate any number of customer accounts with the group.
*/
class CustomerGroupResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return CustomerGroupCollection 
	*/
	public function getGroups($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerGroupClient::getGroupsClient($startIndex, $pageSize, $sortBy, $filter, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the name of a customer group specified the customer group ID.
	*
	* @param int $groupId Identifier of the customer group to retrieve.
	* @return CustomerGroup 
	*/
	public function getGroup($groupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerGroupClient::getGroupClient($groupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new customer group. New customer groups do not have any associated customer accounts.
	*
	* @param CustomerGroup $group Properties of the customer group to add.
	* @return CustomerGroup 
	*/
	public function addGroup($group, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerGroupClient::addGroupClient($group, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates the name of a defined customer group.
	*
	* @param int $groupId Identifier of the customer group to update.
	* @param CustomerGroup $group Properties of the customer group to update.
	* @return CustomerGroup 
	*/
	public function updateGroup($group, $groupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerGroupClient::updateGroupClient($group, $groupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a customer group specified by its unique identifier. Deleting a group removes any customer account associations, but does not delete the customer account itself.
	*
	* @param int $groupId Identifier of the customer group to delete.
	*/
	public function deleteGroup($groupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerGroupClient::deleteGroupClient($groupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


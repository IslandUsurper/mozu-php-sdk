<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Customer\CustomerAccountClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Create, view, update, and delete a contact in a customer account. A customer account may have multiple contacts for billing or shipping addresses. Each contact may also list any groups to which the contact belongs and whether the contact accepts marketing material such as newsletters or email offers.
*/
class CustomerAccountResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of customer accounts.
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param bool $isAnonymous 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerAccountCollection 
	*/
	public function getAccounts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::getAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $isAnonymous, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieve details of a customer account.
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @return CustomerAccount 
	*/
	public function getAccount($accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::getAccountClient($accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @return LoginState 
	*/
	public function getLoginState($accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateClient($accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new customer account.
	*
	* @param CustomerAccount $account 
	* @return CustomerAccount 
	*/
	public function addAccount($account, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountClient($account, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param PasswordInfo $passwordInfo 
	*/
	public function changePassword($passwordInfo, $accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::changePasswordClient($passwordInfo, $accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param CustomerLoginInfo $customerAuthInfo 
	* @return CustomerAuthTicket 
	*/
	public function addLoginToExistingCustomer($customerAuthInfo, $accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::addLoginToExistingCustomerClient($customerAuthInfo, $accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	*/
	public function recomputeCustomerLifetimeValue($accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::recomputeCustomerLifetimeValueClient($accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isLocked 
	*/
	public function setLoginLocked($isLocked, $accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::setLoginLockedClient($isLocked, $accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isPasswordChangeRequired 
	*/
	public function setPasswordChangeRequired($isPasswordChangeRequired, $accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo 
	* @return CustomerAuthTicket 
	*/
	public function addAccountAndLogin($accountAndAuthInfo, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountAndLoginClient($accountAndAuthInfo, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param array|CustomerAccountAndAuthInfo $customers 
	* @return CustomerAccountCollection 
	*/
	public function addAccounts($customers, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountsClient($customers, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $emailAddress 
	* @return LoginState 
	*/
	public function getLoginStateByEmailAddress($emailAddress, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByEmailAddressClient($emailAddress, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $userName 
	* @return LoginState 
	*/
	public function getLoginStateByUserName($userName, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByUserNameClient($userName, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param ResetPasswordInfo $resetPasswordInfo 
	*/
	public function resetPassword($resetPasswordInfo, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::resetPasswordClient($resetPasswordInfo, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* Updates a customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param CustomerAccount $account 
	* @return CustomerAccount 
	*/
	public function updateAccount($account, $accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::updateAccountClient($account, $accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	*/
	public function deleteAccount($accountId, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$mozuClient = CustomerAccountClient::deleteAccountClient($accountId, $userAuthTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


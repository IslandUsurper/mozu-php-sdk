<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Customer\CustomerAccountClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
*/
class CustomerAccountResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of customer accounts.
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerAccountCollection 
	*/
	public function getAccounts($fields =  null, $filter =  null, $pageSize =  null, $q =  null, $qLimit =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::getAccountsClient($fields, $filter, $pageSize, $q, $qLimit, $sortBy, $startIndex, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieve details of a customer account.
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @return CustomerAccount 
	*/
	public function getAccount( $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::getAccountClient( $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @return LoginState 
	*/
	public function getLoginState( $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateClient( $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $emailAddress 
	* @return LoginState 
	*/
	public function getLoginStateByEmailAddress( $emailAddress, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByEmailAddressClient( $emailAddress, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param string $userName 
	* @return LoginState 
	*/
	public function getLoginStateByUserName( $userName, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByUserNameClient( $userName, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new customer account based on the information specified in the request.
	*
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	*/
	public function addAccount($account, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountClient($account, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param CustomerLoginInfo $customerAuthInfo 
	* @return CustomerAuthTicket 
	*/
	public function addLoginToExistingCustomer($customerAuthInfo,  $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::addLoginToExistingCustomerClient($customerAuthInfo,  $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	*/
	public function recomputeCustomerLifetimeValue( $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::recomputeCustomerLifetimeValueClient( $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isLocked 
	*/
	public function setLoginLocked($isLocked,  $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::setLoginLockedClient($isLocked,  $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param bool $isPasswordChangeRequired 
	*/
	public function setPasswordChangeRequired($isPasswordChangeRequired,  $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::setPasswordChangeRequiredClient($isPasswordChangeRequired,  $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* 
	*
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo 
	* @return CustomerAuthTicket 
	*/
	public function addAccountAndLogin($accountAndAuthInfo, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountAndLoginClient($accountAndAuthInfo, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param array|CustomerAccountAndAuthInfo $customers 
	* @return CustomerAccountCollection 
	*/
	public function addAccounts($customers, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::addAccountsClient($customers, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* 
	*
	* @param ResetPasswordInfo $resetPasswordInfo 
	*/
	public function resetPassword($resetPasswordInfo, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::resetPasswordClient($resetPasswordInfo, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	/**
	* Updates a customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	*/
	public function updateAccount($account,  $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::updateAccountClient($account,  $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	*/
	public function deleteAccount( $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = CustomerAccountClient::deleteAccountClient( $accountId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Orders\FulfillmentActionClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Fulfillment resource to manage shipments or pickups of collections of packages for an order.
*/
class FulfillmentActionResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieve a list of the fulfillment information for the specified order.
	*
	* @param bool $draft If true, retrieve the draft version of the order's fulfillment information, which might include uncommitted changes.
	* @param string $orderId Retrieves a list of the fulfillment information for the specified order.
	* @return FulfillmentInfo 
	*/
	public function getFulfillmentInfo($orderId, $draft =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = FulfillmentActionClient::getFulfillmentInfoClient($orderId, $draft, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Sets the fulfillment action to "Ship" or "PickUp". To ship an order or prepare it for in-store pickup, the order must have a customer name, the "Open" or "OpenAndProcessing" status. To ship the order, it must also have the full shipping address and shipping method. Shipping all packages or picking up all pickups for an order will complete a paid order.
	*
	* @param string $orderId Unique identifier of the order for which to perform the fulfillment action.
	* @param FulfillmentAction $action The action to perform for the order fulfillment.
	* @return Order 
	*/
	public function performFulfillmentAction($action, $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = FulfillmentActionClient::performFulfillmentActionClient($action, $orderId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates one or more propertes of fulfillment information for the specified order.
	*
	* @param string $orderId Unique identifier of the order associated with the fulfillment information to update.
	* @param string $updateMode Specifies whether to set the fulfillment information by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version System-supplied integer that represents the current version of the order, which prevents users from unintentionally overriding changes to the order. When a user performs an operation for a defined order, the system validates that the version of the updated order matches the version of the order on the server. After the operation completes successfully, the system increments the version number by one.
	* @param FulfillmentInfo $fulfillmentInfo Array of shipping fulfillment information associated with an order.
	* @return FulfillmentInfo 
	*/
	public function setFulFillmentInfo($fulfillmentInfo, $orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = FulfillmentActionClient::setFulFillmentInfoClient($fulfillmentInfo, $orderId, $updateMode, $version, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	
}

?>


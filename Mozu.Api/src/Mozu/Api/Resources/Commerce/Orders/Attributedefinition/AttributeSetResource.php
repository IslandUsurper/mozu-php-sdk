<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders\Attributedefinition;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Orders\Attributedefinition\AttributeSetClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* A grouping of related orders attributes.
*/
class AttributeSetResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves the attribute set by providing the name and namespace.
	*
	* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @return AttributeSet 
	*/
	public function getAttributeSetByName($fqn)
	{
		$mozuClient = AttributeSetClient::getAttributeSetByNameClient($fqn);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves a list of attribute sets according to any filter criteria or sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return AttributeSetCollection 
	*/
	public function getAttributeSets($filter, $pageSize, $sortBy, $startIndex)
	{
		$mozuClient = AttributeSetClient::getAttributeSetsClient($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves a specific attribute set by providing the attribute set ID.
	*
	* @param int $attributeSetId Identifier of the attribute set being retrieved.
	* @return AttributeSet 
	*/
	public function getAttributeSet($attributeSetId)
	{
		$mozuClient = AttributeSetClient::getAttributeSetClient($attributeSetId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Create new attribute set to provide order extensibility.
	*
	* @param AttributeSet $attributeSet The properties of the orders attribute set being created.
	* @return AttributeSet 
	*/
	public function createAttributeSet($attributeSet)
	{
		$mozuClient = AttributeSetClient::createAttributeSetClient($attributeSet);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Update an existing attribute set by providing the attribute set ID.
	*
	* @param int $attributeSetId Identifier of the attribute set being updated.
	* @param AttributeSet $attributeSet The properties of the attribute set being updated.
	* @return AttributeSet 
	*/
	public function updateAttributeSet($attributeSetId, $attributeSet)
	{
		$mozuClient = AttributeSetClient::updateAttributeSetClient($attributeSetId, $attributeSet);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Associate an attribute with an attribute set.
	*
	* @param AttributeSetAssignment $assignment Properties of the attribute set assignment.
	*/
	public function upsertAttributeSetAssignment($assignment)
	{
		$mozuClient = AttributeSetClient::upsertAttributeSetAssignmentClient($assignment);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Delete a specific attribute set by providing the attribute set ID.
	*
	* @param int $attributeSetId Identifier of the attribute set being deleted.
	*/
	public function deleteAttributeSet($attributeSetId)
	{
		$mozuClient = AttributeSetClient::deleteAttributeSetClient($attributeSetId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Removes the attribute from its assigned attribute set.
	*
	* @param int $attributeSetId Identifier of the attribute set.
	* @param int $locationId Identifier of the location. Locations describe where in the application the attribute set definition will be rendered (such as a page).
	*/
	public function removeAttributeSetAssignment($attributeSetId, $locationId)
	{
		$mozuClient = AttributeSetClient::removeAttributeSetAssignmentClient($attributeSetId, $locationId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	/**
	* Delete a specific attribute set by providing the fully qualified name.
	*
	* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
	*/
	public function deleteAttributeSetByName($fqn)
	{
		$mozuClient = AttributeSetClient::deleteAttributeSetByNameClient($fqn);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


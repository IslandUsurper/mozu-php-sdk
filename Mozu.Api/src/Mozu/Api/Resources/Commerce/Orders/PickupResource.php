<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Orders\PickupClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Pickups resource to organize items submitted in an order into pickups that enable the shopper to fulfill the order items using the in-store pickup method.
*/
class PickupResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves the details of the in-store pickup specified in the request.
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to retrieve.
	* @return Pickup 
	*/
	public function getPickup( $orderId,  $pickupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = PickupClient::getPickupClient( $orderId,  $pickupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves a list of the actions available to perform for the pickup specified in the request.
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup for which to retrieve available actions.
	* @return array|string 
	*/
	public function getAvailablePickupFulfillmentActions( $orderId,  $pickupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = PickupClient::getAvailablePickupFulfillmentActionsClient( $orderId,  $pickupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Create a new pickup for the order specified in the request for in-store fufillment.
	*
	* @param string $orderId Unique identifier of the order.
	* @param Pickup $pickup Properties of the in-store pickup to create.
	* @return Pickup 
	*/
	public function createPickup($pickup,  $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = PickupClient::createPickupClient($pickup,  $orderId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates one or more details of a defined in-store pickup.
	*
	* @param string $orderId Unique identifier of the order associated with the in-store pickup.
	* @param string $pickupId Unique identifier of the pickup to update.
	* @param Pickup $pickup Properties of the in-store pickup to update.
	* @return Pickup 
	*/
	public function updatePickup($pickup,  $orderId,  $pickupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = PickupClient::updatePickupClient($pickup,  $orderId,  $pickupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Removes a pickup previously defined for order item in-store pickup fulfillment.
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to remove.
	*/
	public function deletePickup( $orderId,  $pickupId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = PickupClient::deletePickupClient( $orderId,  $pickupId, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


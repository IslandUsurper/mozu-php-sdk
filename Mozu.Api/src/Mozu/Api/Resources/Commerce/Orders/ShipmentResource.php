<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Orders\ShipmentClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* Use the shipments resource to manage shipments of collections of packages for an order.
*/
class ShipmentResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves the shipment actions available for the specified order and package.
	*
	* @param string $orderId Unique identifier of the order for which to get a list of available actions.
	* @param string $packageId Unique identifier for the physical package associated with the order for which to get a list of available actions.
	* @return array|string 
	*/
	public function getAvailableShipmentActions($orderId, $packageId)
	{
		$mozuClient = ShipmentClient::getAvailableShipmentActionsClient($orderId, $packageId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the details of the order shipment specified in the request.
	*
	* @param string $orderId Unique identifier of the order associated with the shipment to retrieve.
	* @param string $shipmentId Unique identifier of the shipment to retrieve.
	* @return Shipment 
	*/
	public function getShipment($orderId, $shipmentId)
	{
		$mozuClient = ShipmentClient::getShipmentClient($orderId, $shipmentId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the available shipping methods applicable to the order. Typically used to display available shipping method options on the checkout page.
	*
	* @param string $orderId Unique identifier of the order for the available shipment methods being retrieved.
	* @return array|ShippingRate 
	*/
	public function getAvailableShipmentMethods($orderId)
	{
		$mozuClient = ShipmentClient::getAvailableShipmentMethodsClient($orderId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a shipment from one or more package associated with an order and assign a label and tracking number to an order shipment.
	*
	* @param string $orderId Unique identifier of the order for this shipment.
	* @param array|string $packageIds List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.
	* @return array|Package 
	*/
	public function createPackageShipments($orderId, $packageIds)
	{
		$mozuClient = ShipmentClient::createPackageShipmentsClient($orderId, $packageIds);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Sets the shipment action to "Ship." To ship an order, the order must have a customer name, the "Open" or "OpenAndProcessing" status, full shipping address, and shipping method. Shipping all packages associated with shipments for an order will complete a paid order.
	*
	* @param string $orderId Unique identifier of the order associated with the shipment for which to perform the action.
	* @param ShipmentAction $action The action to perform for the order shipment.
	* @return Order 
	*/
	public function performShipmentAction($orderId, $action)
	{
		$mozuClient = ShipmentClient::performShipmentActionClient($orderId, $action);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Cancels a shipment.
	*
	* @param string $orderId Unique identifier of the order to cancel shipment.
	* @param string $shipmentId Unique identifier of the shipment to cancel.
	*/
	public function deleteShipment($orderId, $shipmentId)
	{
		$mozuClient = ShipmentClient::deleteShipmentClient($orderId, $shipmentId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


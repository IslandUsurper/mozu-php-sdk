<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Carts;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Carts\CartItemClient;
use Mozu\Api\Resources\BaseResource;
use Mozu\Api\ApiContext;

/**
* Use the cart items subresource to manage a collection of items in an active shopping cart.
*/
class CartItemResource extends BaseResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieves a list of cart items including the total number of items in the cart.
	*
	* @return CartItemCollection 
	*/
	public function getCartItems()
	{
		$mozuClient = CartItemClient::getCartItemsClient();
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves a particular cart item by providing the cart item ID.
	*
	* @param string $cartItemId Identifier of the cart item to retrieve.
	* @return CartItem 
	*/
	public function getCartItem($cartItemId)
	{
		$mozuClient = CartItemClient::getCartItemClient($cartItemId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Adds an item such as product to the current shopper's cart.
	*
	* @param CartItem $cartItem All properties of the new cart item. The product code is required.
	* @return CartItem 
	*/
	public function addItemToCart($cartItem)
	{
		$mozuClient = CartItemClient::addItemToCartClient($cartItem);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Update properties of a specific cart item.
	*
	* @param string $cartItemId Identifier of the cart item to update.
	* @param CartItem $cartItem The properties of the cart item to update.
	* @return CartItem 
	*/
	public function updateCartItem($cartItemId, $cartItem)
	{
		$mozuClient = CartItemClient::updateCartItemClient($cartItemId, $cartItem);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Update the quantity of an individual cart item in the cart of a current shopper.
	*
	* @param string $cartItemId Identifier of the cart item to update quantity.
	* @param int $quantity The number of cart items in the shopper's active cart.
	* @return CartItem 
	*/
	public function updateCartItemQuantity($cartItemId, $quantity)
	{
		$mozuClient = CartItemClient::updateCartItemQuantityClient($cartItemId, $quantity);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Removes all cart items in the shopper's active cart.
	*
	* @return Cart 
	*/
	public function removeAllCartItems()
	{
		$mozuClient = CartItemClient::removeAllCartItemsClient();
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Delete a specific cart item by providing the cart item ID.
	*
	* @param string $cartItemId Identifier of the cart item to delete.
	*/
	public function deleteCartItem($cartItemId)
	{
		$mozuClient = CartItemClient::deleteCartItemClient($cartItemId);
		$mozuClient = parent::SetContext($this->apiContext, $mozuClient,TRUE);
		$mozuClient->execute();

	}
	
	
}

?>


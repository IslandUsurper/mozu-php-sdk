<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Location\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Clients\Commerce\Location\Admin\LocationTypeClient;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Location Types resource to manage the types of locations your tenant maintains, such as warehouses, physical storefronts, and kiosks.
*/
class LocationTypeResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	/**
	* Retrieve a list of all location types defined for the tenant.
	*
	* @return array|LocationType 
	*/
	public function getLocationTypes(Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = LocationTypeClient::getLocationTypesClient($authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Retrieves the details of the location type specified in the request.
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @return LocationType 
	*/
	public function getLocationType( $locationTypeCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = LocationTypeClient::getLocationTypeClient( $locationTypeCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Creates a new location type based on the information specified in the request.
	*
	* @param LocationType $locationType Properties of the location type to create.
	* @return LocationType 
	*/
	public function addLocationType($locationType, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = LocationTypeClient::addLocationTypeClient($locationType, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Updates the name of a defined location type.
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @param LocationType $locationType Properties of the location type to update.
	* @return LocationType 
	*/
	public function updateLocationType($locationType,  $locationTypeCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = LocationTypeClient::updateLocationTypeClient($locationType,  $locationTypeCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
	/**
	* Deletes the location type specified in the request.
	*
	* @param string $locationTypeCode User-defined code used to identify the location type.
	*/
	public function deleteLocationType( $locationTypeCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$mozuClient = LocationTypeClient::deleteLocationTypeClient( $locationTypeCode, $authTicket);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();

	}
	
	
}

?>


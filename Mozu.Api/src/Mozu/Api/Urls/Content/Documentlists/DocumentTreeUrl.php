<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Urls\Content\Documentlists;

use Mozu\Api\Urls\BaseUrl;

class DocumentTreeUrl extends BaseUrl {

	/**
		* Get Resource Url for GetTreeDocumentContent
		* @param string $documentListName The name of the document list associated with the document.
		* @param string $documentName The name of the document, which is unique within its folder.
		* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
		* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
		* @param string $publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
		* @return string Resource Url
	*/
	public static function getTreeDocumentContentUrl($documentListName, $documentName, $folderId, $folderPath, $publishState)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content?folderPath={folderPath}&folderId={folderId}&publishState={publishState}";
		$url = parent::formatUrl($url, "documentListName", $documentListName);
		$url = parent::formatUrl($url, "documentName", $documentName);
		$url = parent::formatUrl($url, "folderId", $folderId);
		$url = parent::formatUrl($url, "folderPath", $folderPath);
		$url = parent::formatUrl($url, "publishState", $publishState);
		return $url;
	}
	
	/**
		* Get Resource Url for GetTreeDocument
		* @param string $documentListName The name of the document list associated with the document.
		* @param string $documentName The name of the document, which is unique within its folder.
		* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
		* @param string $folderPath If applicable, the path of the folder hierarchy location that contains the document.
		* @param string $publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
		* @return string Resource Url
	*/
	public static function getTreeDocumentUrl($documentListName, $documentName, $folderId, $folderPath, $publishState)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}?folderPath={folderPath}&folderId={folderId}&publishState={publishState}";
		$url = parent::formatUrl($url, "documentListName", $documentListName);
		$url = parent::formatUrl($url, "documentName", $documentName);
		$url = parent::formatUrl($url, "folderId", $folderId);
		$url = parent::formatUrl($url, "folderPath", $folderPath);
		$url = parent::formatUrl($url, "publishState", $publishState);
		return $url;
	}
	
	/**
		* Get Resource Url for UpdateTreeDocumentContent
		* @param string $documentListName The name of the document list associated with the document.
		* @param string $documentName The name of the document, which is unique within its folder.
		* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
		* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
		* @return string Resource Url
	*/
	public static function updateTreeDocumentContentUrl($documentListName, $documentName, $folderId, $folderPath)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content?folderPath={folderPath}&folderId={folderId}";
		$url = parent::formatUrl($url, "documentListName", $documentListName);
		$url = parent::formatUrl($url, "documentName", $documentName);
		$url = parent::formatUrl($url, "folderId", $folderId);
		$url = parent::formatUrl($url, "folderPath", $folderPath);
		return $url;
	}
	
	/**
		* Get Resource Url for DeleteTreeDocumentContent
		* @param string $documentListName The name of the document list associated with the document.
		* @param string $documentName The name of the document, which is unique within its folder.
		* @param string $folderId If applicable, the unique identifier of the folder that contains the document.
		* @param string $folderPath If applicable, the path of the folder hierarchy location associated with the document.
		* @return string Resource Url
	*/
	public static function deleteTreeDocumentContentUrl($documentListName, $documentName, $folderId, $folderPath)
	{
		$url = "/api/content/documentlists/{documentListName}/documentTree/{documentName}/content?folderPath={folderPath}&folderId={folderId}";
		$url = parent::formatUrl($url, "documentListName", $documentListName);
		$url = parent::formatUrl($url, "documentName", $documentName);
		$url = parent::formatUrl($url, "folderId", $folderId);
		$url = parent::formatUrl($url, "folderPath", $folderPath);
		return $url;
	}
	
}

?>


<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Urls\Commerce\Orders\Attributedefinition;

use Mozu\Api\Urls\BaseUrl;

class AttributeUrl extends BaseUrl {

	/**
		* Get Resource Url for GetAttributeByName
		* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
		* @return string Resource Url
	*/
	public static function getAttributeByNameUrl($fqn)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/?namespace={namespace}&name={name}&";
		$url = parent::formatUrl($url, "fqn", $fqn);
		return $url;
	}
	
	/**
		* Get Resource Url for GetAttributes
		* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
		* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
		* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
		* @param int $startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
		* @return string Resource Url
	*/
	public static function getAttributesUrl($filter, $pageSize, $sortBy, $startIndex)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&&filter={filter}";
		$url = parent::formatUrl($url, "filter", $filter);
		$url = parent::formatUrl($url, "pageSize", $pageSize);
		$url = parent::formatUrl($url, "sortBy", $sortBy);
		$url = parent::formatUrl($url, "startIndex", $startIndex);
		return $url;
	}
	
	/**
		* Get Resource Url for GetAttribute
		* @param int $attributeId Identifier of the single order attribute to retrieve.
		* @return string Resource Url
	*/
	public static function getAttributeUrl($attributeId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/{attributeId}";
		$url = parent::formatUrl($url, "attributeId", $attributeId);
		return $url;
	}
	
	/**
		* Get Resource Url for CreateAttribute
		* @return string Resource Url
	*/
	public static function createAttributeUrl()
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/";
		return $url;
	}
	
	/**
		* Get Resource Url for UpdateAttribute
		* @param int $attributeId Unique identifier of the attribute.
		* @return string Resource Url
	*/
	public static function updateAttributeUrl($attributeId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/{attributeId}";
		$url = parent::formatUrl($url, "attributeId", $attributeId);
		return $url;
	}
	
	/**
		* Get Resource Url for DeleteAttribute
		* @param int $attributeId Unique identifier of the attribute.
		* @return string Resource Url
	*/
	public static function deleteAttributeUrl($attributeId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/{attributeId}";
		$url = parent::formatUrl($url, "attributeId", $attributeId);
		return $url;
	}
	
	/**
		* Get Resource Url for DeleteAttributeByName
		* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
		* @return string Resource Url
	*/
	public static function deleteAttributeByNameUrl($fqn)
	{
		$url = "/api/commerce/orders/attributedefinition/attributes/{attributeId}";
		$url = parent::formatUrl($url, "fqn", $fqn);
		return $url;
	}
	
}

?>


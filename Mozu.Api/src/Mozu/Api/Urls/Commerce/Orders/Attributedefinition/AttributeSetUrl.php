<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Urls\Commerce\Orders\Attributedefinition;

use Mozu\Api\Urls\BaseUrl;

class AttributeSetUrl extends BaseUrl {

	/**
		* Get Resource Url for GetAttributeSetByName
		* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
		* @return string Resource Url
	*/
	public static function getAttributeSetByNameUrl($fqn)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/?fqn={fqn}&";
		$url = parent::formatUrl($url, "fqn", $fqn);
		return $url;
	}
	
	/**
		* Get Resource Url for GetAttributeSets
		* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
		* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
		* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
		* @param int $startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
		* @return string Resource Url
	*/
	public static function getAttributeSetsUrl($filter, $pageSize, $sortBy, $startIndex)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&&filter={filter}";
		$url = parent::formatUrl($url, "filter", $filter);
		$url = parent::formatUrl($url, "pageSize", $pageSize);
		$url = parent::formatUrl($url, "sortBy", $sortBy);
		$url = parent::formatUrl($url, "startIndex", $startIndex);
		return $url;
	}
	
	/**
		* Get Resource Url for GetAttributeSet
		* @param int $attributeSetId Identifier of the attribute set being retrieved.
		* @return string Resource Url
	*/
	public static function getAttributeSetUrl($attributeSetId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}";
		$url = parent::formatUrl($url, "attributeSetId", $attributeSetId);
		return $url;
	}
	
	/**
		* Get Resource Url for CreateAttributeSet
		* @return string Resource Url
	*/
	public static function createAttributeSetUrl()
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/";
		return $url;
	}
	
	/**
		* Get Resource Url for UpdateAttributeSet
		* @param int $attributeSetId Identifier of the attribute set being updated.
		* @return string Resource Url
	*/
	public static function updateAttributeSetUrl($attributeSetId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}";
		$url = parent::formatUrl($url, "attributeSetId", $attributeSetId);
		return $url;
	}
	
	/**
		* Get Resource Url for UpsertAttributeSetAssignment
		* @return string Resource Url
	*/
	public static function upsertAttributeSetAssignmentUrl()
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/locations";
		return $url;
	}
	
	/**
		* Get Resource Url for DeleteAttributeSet
		* @param int $attributeSetId Identifier of the attribute set being deleted.
		* @return string Resource Url
	*/
	public static function deleteAttributeSetUrl($attributeSetId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}";
		$url = parent::formatUrl($url, "attributeSetId", $attributeSetId);
		return $url;
	}
	
	/**
		* Get Resource Url for RemoveAttributeSetAssignment
		* @param int $attributeSetId Identifier of the attribute set.
		* @param int $locationId Identifier of the location. Locations describe where in the application the attribute set definition will be rendered (such as a page).
		* @return string Resource Url
	*/
	public static function removeAttributeSetAssignmentUrl($attributeSetId, $locationId)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/{attributesetid}/locations/{locationId}";
		$url = parent::formatUrl($url, "attributeSetId", $attributeSetId);
		$url = parent::formatUrl($url, "locationId", $locationId);
		return $url;
	}
	
	/**
		* Get Resource Url for DeleteAttributeSetByName
		* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
		* @return string Resource Url
	*/
	public static function deleteAttributeSetByNameUrl($fqn)
	{
		$url = "/api/commerce/orders/attributedefinition/attributesets/{fqn}";
		$url = parent::formatUrl($url, "fqn", $fqn);
		return $url;
	}
	
}

?>


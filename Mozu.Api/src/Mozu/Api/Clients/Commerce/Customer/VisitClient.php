<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\VisitUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the Visits resource to manage all visits a customer makes to a tenant's sites and measure the level of transactions a customer performs during a unique visit for customer account analytics. Companies can track customer visits by site (including online and in-person interactions), the transactions a customer performs during the visit, and the device type associated with the visit, if any.
*/
class VisitClient {

	/**
	* Retrieves a list of customer visits according to any filter or sort criteria specified in the request.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return MozuClient
	*/
	public static function getVisitsClient($filter =  null, $pageSize =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = VisitUrl::getVisitsUrl($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves the details of the customer visit specified in the request.
	*
	* @param string $visitId Unique identifier of the customer visit to retrieve.
	* @return MozuClient
	*/
	public static function getVisitClient( $visitId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = VisitUrl::getVisitUrl($visitId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new visit for the customer account specified in the request.
	*
	* @param Visit $visit Properties of the visit to add to the customer account.
	* @return MozuClient
	*/
	public static function addVisitClient($visit, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = VisitUrl::addVisitUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($visit);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Updates one or more properties of a defined customer visit.
	*
	* @param string $visitId Unique identifier of the customer visit to update.
	* @param Visit $visit Properties of the customer visit to update.
	* @return MozuClient
	*/
	public static function updateVisitClient($visit,  $visitId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = VisitUrl::updateVisitUrl($visitId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($visit);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


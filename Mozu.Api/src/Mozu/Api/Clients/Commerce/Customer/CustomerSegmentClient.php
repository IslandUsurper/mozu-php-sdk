<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\CustomerSegmentUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* 
*/
class CustomerSegmentClient {

	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getSegmentsClient($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::getSegmentsUrl($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $id 
	* @return MozuClient
	*/
	public static function getSegmentClient($id, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::getSegmentUrl($id);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param CustomerSegment $segment 
	* @return MozuClient
	*/
	public static function addSegmentClient($segment, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::addSegmentUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($segment);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountIds 
	* @param int $id 
	*/
	public static function addSegmentAccountsClient($accountIds, $id, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::addSegmentAccountsUrl($accountIds, $id);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $id 
	* @param CustomerSegment $segment 
	* @return MozuClient
	*/
	public static function updateSegmentClient($segment, $id, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::updateSegmentUrl($id);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($segment);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $id 
	*/
	public static function deleteSegmentClient($id, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::deleteSegmentUrl($id);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountIds 
	* @param int $id 
	*/
	public static function deleteSegmentAccountsClient($accountIds, $id, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = CustomerSegmentUrl::deleteSegmentAccountsUrl($accountIds, $id);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	
}

?>


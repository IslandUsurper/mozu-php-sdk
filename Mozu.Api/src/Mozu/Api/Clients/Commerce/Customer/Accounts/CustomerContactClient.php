<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer\Accounts;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\Accounts\CustomerContactUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
*/
class CustomerContactClient {

	/**
	* Retrieves the specified contact for a customer account such as a billing or shipping contact.
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being retrieved.
	* @param int $contactId Unique identifier of the customer account contact to retrieve.
	* @return MozuClient
	*/
	public static function getAccountContactClient( $accountId,  $contactId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CustomerContactUrl::getAccountContactUrl($accountId, $contactId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
	*
	* @param int $accountId Unique identifier of the customer account associated with the contact information to retrieve.
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param int $pageSize Used to create paged results from a query. Specifies the number of results to display on each page. Maximum: 200.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getAccountContactsClient( $accountId, $filter =  null, $pageSize =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CustomerContactUrl::getAccountContactsUrl($accountId, $filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new contact for a customer account such as a new shipping address.
	*
	* @param int $accountId Unique identifier of the customer account containing the new contact.
	* @param CustomerContact $contact Properties of the new contact. Required properties: Contact.Email, ContactType.
	* @return MozuClient
	*/
	public static function addAccountContactClient($contact,  $accountId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CustomerContactUrl::addAccountContactUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($contact);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Updates a contact for a specified customer account such as to update addresses or change which contact is the primary contact for billing.
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being updated.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param CustomerContact $contact All properties the updated contact will have. Required properties: Name and email address.
	* @return MozuClient
	*/
	public static function updateAccountContactClient($contact,  $accountId,  $contactId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CustomerContactUrl::updateAccountContactUrl($accountId, $contactId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($contact);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes a contact for the specified customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifier of the customer account contact to delete.
	*/
	public static function deleteAccountContactClient( $accountId,  $contactId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CustomerContactUrl::deleteAccountContactUrl($accountId, $contactId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


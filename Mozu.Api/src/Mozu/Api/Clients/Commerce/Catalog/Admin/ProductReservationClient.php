<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductReservationUrl;

/**
* 
*/
class ProductReservationClient {

	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductReservationsClient($dataViewMode, $filter =  null, $pageSize =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::getProductReservationsUrl($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productReservationId 
	* @return MozuClient
	*/
	public static function getProductReservationClient($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::getProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param ProductReservation $productReservation 
	* @return MozuClient
	*/
	public static function addProductReservationClient($dataViewMode, $productReservation, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::addProductReservationUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservation)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productReservationId 
	* @param int $qty 
	*/
	public static function commitReservationClient($dataViewMode,  $productReservationId,  $qty, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::commitReservationUrl($productReservationId, $qty);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Updates an existing product reservation for a product. 
	*
	* @param int $productReservationId Unique identifier of the product reservation to update. 
	* @param ProductReservation $productReservation Properties of the product reservation to update. 
	* @return MozuClient
	*/
	public static function updateProductReservationClient($dataViewMode, $productReservation,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::updateProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservation)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productReservationId 
	*/
	public static function deleteProductReservationClient($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::deleteProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


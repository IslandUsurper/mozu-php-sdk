<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductReservationUrl;

/**
* Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class ProductReservationClient {

	/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	*
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param int $pageSize Used to create paged results from a query. Specifies the number of results to display on each page. Maximum: 200.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductReservationsClient($dataViewMode, $filter =  null, $pageSize =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::getProductReservationsUrl($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves the details of a product reservation.
	*
	* @param int $productReservationId Unique identifier of the product reservation.
	* @return MozuClient
	*/
	public static function getProductReservationClient($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::getProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new product reservation for a product. This action places a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param ProductReservation $productReservation Properties of the product reservation.
	* @return MozuClient
	*/
	public static function addProductReservationClient($dataViewMode, $productReservation, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::addProductReservationUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservation)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Commits a product reservation to decrement the product's inventory by the quantity specified then release the reservation once the order process completed successfully.
	*
	* @param int $productReservationId Unique identifier of the reservation.
	* @param int $qty Number of product items to remove from inventory.
	*/
	public static function commitReservationClient($dataViewMode,  $productReservationId,  $qty, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::commitReservationUrl($productReservationId, $qty);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Updates an existing product reservation for a product. 
	*
	* @param int $productReservationId Unique identifier of the product reservation to update. 
	* @param ProductReservation $productReservation Properties of the product reservation to update. 
	* @return MozuClient
	*/
	public static function updateProductReservationClient($dataViewMode, $productReservation,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::updateProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservation)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes a product reservation. For example, delete a reservation when an order is not processed to return the product quantity back to inventory.
	*
	* @param int $productReservationId Unique identifier of the reservation.
	*/
	public static function deleteProductReservationClient($dataViewMode,  $productReservationId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductReservationUrl::deleteProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Mozu\Api\Headers::X_VOL_DATAVIEW_MODE ,dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use this resource to create products, view the attributes associated with existing products, and determine which sites feature a specific product.
*/
class ProductClient {

	/**
	* Retrieves a list of products according to any specified facets, filter criteria, and sort options.
	*
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param bool $noCount 
	* @param int $pageSize Used to create paged results from a query. Specifies the number of results to display on each page. Maximum: 200.
	* @param string $q A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductsClient($dataViewMode, $filter =  null, $noCount =  null, $pageSize =  null, $q =  null, $qLimit =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::getProductsUrl($filter, $noCount, $pageSize, $q, $qLimit, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves an existing product.
	*
	* @param string $productCode Merchant-created code associated with the product such as a SKU. Max length: 30. Accepts a to z, A to Z, Ã‹-Ã˜, 0 to 9, #, semicolon, commas, apostrophes, and Spaces, but no punctuation or other characters.
	* @return MozuClient
	*/
	public static function getProductClient($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::getProductUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function getProductInCatalogsClient($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::getProductInCatalogsUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function getProductInCatalogClient($dataViewMode,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::getProductInCatalogUrl($catalogId, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new product. Supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
	*
	* @param Product $product Properties of the new product. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.
	* @return MozuClient
	*/
	public static function addProductClient($dataViewMode, $product, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::addProductUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($product)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param ProductInCatalogInfo $productInCatalogInfoIn 
	* @return MozuClient
	*/
	public static function addProductInCatalogClient($dataViewMode, $productInCatalogInfoIn,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::addProductInCatalogUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogInfoIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Modifies an existing product.
	*
	* @param string $productCode "Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	* @param Product $product Properties of the product to update. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.
	* @return MozuClient
	*/
	public static function updateProductClient($dataViewMode, $product,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::updateProductUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($product)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param array|ProductInCatalogInfo $productInCatalogsIn 
	* @return MozuClient
	*/
	public static function updateProductInCatalogsClient($dataViewMode, $productInCatalogsIn,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::updateProductInCatalogsUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogsIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param ProductInCatalogInfo $productInCatalogInfoIn 
	* @return MozuClient
	*/
	public static function updateProductInCatalogClient($dataViewMode, $productInCatalogInfoIn,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::updateProductInCatalogUrl($catalogId, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogInfoIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes the product specified by its product code.
	*
	* @param string $productCode Merchant-created code associated with the product such as a SKU.
	*/
	public static function deleteProductClient($dataViewMode,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::deleteProductUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	*/
	public static function deleteProductInCatalogClient($dataViewMode,  $catalogId,  $productCode, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = ProductUrl::deleteProductInCatalogUrl($catalogId, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


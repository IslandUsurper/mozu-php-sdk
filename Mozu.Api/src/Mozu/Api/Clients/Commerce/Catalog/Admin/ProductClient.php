<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductUrl;

/**
* Use this resource to create products, view the attributes associated with existing products, and determine which sites feature a specific product.
*/
class ProductClient {

	/**
	* Retrieves a list of products according to any specified facets, filter criteria, and sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param bool $noCount If true, the operation does not return the TotalCount number of results.
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $q A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductsClient($filter, $noCount, $pageSize, $q, $qLimit, $sortBy, $startIndex)
	{
		$url = ProductUrl::getProductsUrl($filter, $noCount, $pageSize, $q, $qLimit, $sortBy, $startIndex);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves an existing product.
	*
	* @param string $productCode Merchant-created code associated with the product such as a SKU. Max length: 30. Accepts a to z, A to Z, Ãƒâ€¹-ÃƒËœ, 0 to 9, #, semicolon, commas, apostrophes, and Spaces, but no punctuation or other characters.
	* @return MozuClient
	*/
	public static function getProductClient($productCode)
	{
		$url = ProductUrl::getProductUrl($productCode);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a product that is associated with more than one specific site.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return MozuClient
	*/
	public static function getProductInSitesClient($productCode)
	{
		$url = ProductUrl::getProductInSitesUrl($productCode);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a product that is associated with a specific site ID.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param int $siteId 
	* @return MozuClient
	*/
	public static function getProductInSiteClient($productCode, $siteId)
	{
		$url = ProductUrl::getProductInSiteUrl($productCode, $siteId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Creates a new product. Supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
	*
	* @param Product $product Properties of the new product. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.
	* @return MozuClient
	*/
	public static function addProductClient($product)
	{
		$url = ProductUrl::addProductUrl();
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($product);
		return $mozuClient;

	}
	
	/**
	* Creates a new product and assigns it to a specific site.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param ProductInSiteInfo $productInSiteInfoIn Creates a new product to associate with a site by updating the properties of that product by product ID.
	* @return MozuClient
	*/
	public static function addProductInSiteClient($productCode, $productInSiteInfoIn)
	{
		$url = ProductUrl::addProductInSiteUrl($productCode);
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($productInSiteInfoIn);
		return $mozuClient;

	}
	
	/**
	* Updates the inventory for an existing product. The inventory or stock adjustment value is either an absolute number (number of items in stock) or Delta (the number to subtract from or add to the current number of items in stock).
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param StockOnHandAdjustment $stockAdjustment Inventory adjustment for the product. Must supply Type (either Absolute or Delta) and Value (number of items to adjust). If Delta, specify a negative number to subtract inventory.
	* @return MozuClient
	*/
	public static function updateProductStockClient($productCode, $stockAdjustment)
	{
		$url = ProductUrl::updateProductStockUrl($productCode);
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($stockAdjustment);
		return $mozuClient;

	}
	
	/**
	* Modifies an existing product.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param Product $product Properties of the product to update. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.
	* @return MozuClient
	*/
	public static function updateProductClient($productCode, $product)
	{
		$url = ProductUrl::updateProductUrl($productCode);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($product);
		return $mozuClient;

	}
	
	/**
	* Modifies an existing product that is associated with more than one specific site. For example, to link an existing product that is already associated to a site to another site, use this operation to create that association.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param array|ProductInSiteInfo $productInSitesIn Modifies an existing product associated with more than one site by updating the properties of that product by product ID.
	* @return MozuClient
	*/
	public static function updateProductInSitesClient($productCode, $productInSitesIn)
	{
		$url = ProductUrl::updateProductInSitesUrl($productCode);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($productInSitesIn);
		return $mozuClient;

	}
	
	/**
	* Modifies an existing product associated with a specific site ID.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param int $siteId 
	* @param ProductInSiteInfo $productInSiteInfoIn Modifies an existing product associated with a site by updating the properties of that product by product ID.
	* @return MozuClient
	*/
	public static function updateProductInSiteClient($productCode, $siteId, $productInSiteInfoIn)
	{
		$url = ProductUrl::updateProductInSiteUrl($productCode, $siteId);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($productInSiteInfoIn);
		return $mozuClient;

	}
	
	/**
	* Deletes the product specified by its product code.
	*
	* @param string $productCode Merchant-created code associated with the product such as a SKU.
	*/
	public static function deleteProductClient($productCode)
	{
		$url = ProductUrl::deleteProductUrl($productCode);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Deletes the product specified by its product code and based on the site it has been associated with.
	*
	* @param string $productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param int $siteId 
	*/
	public static function deleteProductInSiteClient($productCode, $siteId)
	{
		$url = ProductUrl::deleteProductInSiteUrl($productCode, $siteId);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin\Products;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\Products\ProductPropertyUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Query, create, and update product properties.
*/
class ProductPropertyClient {

	/**
	* Retrieves a list of product properties by providing the product code.
	*
	* @param string $productCode Identifies the product for which a list of properties is being retrieved.
	* @return MozuClient
	*/
	public static function getPropertiesClient($dataViewMode, $productCode, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductPropertyUrl::getPropertiesUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves the individual product property by providing the product code and the attribute's fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param string $productCode Identifies the product for which a single property is being retrieved.
	* @return MozuClient
	*/
	public static function getPropertyClient($dataViewMode, $productCode, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductPropertyUrl::getPropertyUrl($attributeFQN, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Adds or creates an individual property by providing the product code.
	*
	* @param string $productCode The merchant-created code that uniquely identifies the product such as a SKU or item number. Identifies the product for which a new property is created.
	* @param ProductProperty $productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to add.
	* @return MozuClient
	*/
	public static function addPropertyClient($dataViewMode, $productProperty, $productCode, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductPropertyUrl::addPropertyUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productProperty)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Update the details of a product property by providng the product code and the attribute's fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param string $productCode Identifies the product for which a list of properties is being updated.
	* @param ProductProperty $productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to update.
	* @return MozuClient
	*/
	public static function updatePropertyClient($dataViewMode, $productProperty, $productCode, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductPropertyUrl::updatePropertyUrl($attributeFQN, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productProperty)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes the property by providing the product code and the attribute's fully qualified name.
	*
	* @param string $attributeFQN "The fully qualified name of the attribute, which is a user defined attribute identifier."
	* @param string $productCode Identifies the product for which a new property is being deleted.
	*/
	public static function deletePropertyClient($dataViewMode, $productCode, $attributeFQN, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductPropertyUrl::deletePropertyUrl($attributeFQN, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	
}

?>


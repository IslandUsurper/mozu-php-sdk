<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Storefront;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Storefront\ProductUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Manage shoppers' product selection process during a visit to the storefront. Update product options as shoppers pick and choose their product choices. A shopper can't add a product to a cart until all of its required options have been selected.
*/
class ProductClient {

	/**
	* Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options. A set of filter expressions representing the search parameters for a query.
	*
	* @param string $filter "A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - ""filter=IsDisplayed+eq+true"""
	* @param int $pageSize Used to create paged results from a query. Specifies the number of results to display on each page. Maximum: 200.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductsClient($filter =  null, $startIndex =  null, $pageSize =  null, $sortBy =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::getProductsUrl($filter, $pageSize, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $locationCodes 
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function getProductInventoryClient($productCode, $locationCodes =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::getProductInventoryUrl($locationCodes, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves information about a single product given its product code.
	*
	* @param bool $allowInactive If true, returns an inactive product as part of the query.
	* @param string $productCode "Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	* @param bool $skipInventoryCheck 
	* @param string $variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	* @return MozuClient
	*/
	public static function getProductClient($productCode, $variationProductCode =  null, $allowInactive =  null, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::getProductUrl($allowInactive, $productCode, $skipInventoryCheck, $variationProductCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
	*
	* @param bool $includeOptionDetails If true, the response returns details about the product. If false, returns a product summary such as the product name, price, and sale price.
	* @param string $productCode "Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	* @param bool $skipInventoryCheck 
	* @param ProductOptionSelections $productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	* @return MozuClient
	*/
	public static function configuredProductClient($productOptionSelections, $productCode, $includeOptionDetails =  null, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::configuredProductUrl($includeOptionDetails, $productCode, $skipInventoryCheck);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productOptionSelections);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Validate the final state of shopper-selected options.
	*
	* @param string $productCode "Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	* @param bool $skipInventoryCheck 
	* @param ProductOptionSelections $productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	* @return MozuClient
	*/
	public static function validateProductClient($productOptionSelections, $productCode, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::validateProductUrl($productCode, $skipInventoryCheck);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productOptionSelections);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $allowInactive 
	* @param int $customerAccountId 
	* @param string $productCode 
	* @param bool $skipInventoryCheck 
	* @param string $variationProductCode 
	* @param DiscountSelections $discountSelections 
	* @return MozuClient
	*/
	public static function validateDiscountsClient($discountSelections, $productCode, $variationProductCode =  null, $customerAccountId =  null, $allowInactive =  null, $skipInventoryCheck =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = ProductUrl::validateDiscountsUrl($allowInactive, $customerAccountId, $productCode, $skipInventoryCheck, $variationProductCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($discountSelections);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Carts;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Carts\CartItemUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the cart items subresource to manage a collection of items in an active shopping cart.
*/
class CartItemClient {

	/**
	* Retrieves a list of cart items including the total number of items in the cart.
	*
	* @return MozuClient
	*/
	public static function getCartItemsClient(Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::getCartItemsUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieves a particular cart item by providing the cart item ID.
	*
	* @param string $cartItemId Identifier of the cart item to retrieve.
	* @return MozuClient
	*/
	public static function getCartItemClient($cartItemId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::getCartItemUrl($cartItemId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Adds a product to the current shopper's cart.
	*
	* @param CartItem $cartItem All properties of the new cart item. The product code is required.
	* @return MozuClient
	*/
	public static function addItemToCartClient($cartItem, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::addItemToCartUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($cartItem);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Update the product or product quantity of an item in the current shopper's cart.
	*
	* @param string $cartItemId Identifier of the cart item to update.
	* @param CartItem $cartItem The properties of the cart item to update.
	* @return MozuClient
	*/
	public static function updateCartItemClient($cartItem, $cartItemId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::updateCartItemUrl($cartItemId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($cartItem);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Update the quantity of an individual cart item in the cart of the current shopper.
	*
	* @param string $cartItemId Identifier of the cart item to update quantity.
	* @param int $quantity The number of cart items in the shopper's active cart.
	* @return MozuClient
	*/
	public static function updateCartItemQuantityClient($cartItemId, $quantity, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::updateCartItemQuantityUrl($cartItemId, $quantity);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Removes all items in the current shopper's active cart.
	*
	* @return MozuClient
	*/
	public static function removeAllCartItemsClient(Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::removeAllCartItemsUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes a specific cart item by providing the cart item ID.
	*
	* @param string $cartItemId Identifier of the cart item to delete.
	*/
	public static function deleteCartItemClient($cartItemId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = CartItemUrl::deleteCartItemUrl($cartItemId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


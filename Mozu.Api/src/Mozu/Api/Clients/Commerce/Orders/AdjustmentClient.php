<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Orders;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Orders\AdjustmentUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use this subresource to manage ad-hoc order level price adjustments.
*/
class AdjustmentClient {

	/**
	* Modify the amount charged for shipping the specified order.
	*
	* @param string $orderId Unique identifier of the order associated with the shipping adjustment.
	* @param string $updateMode Specifies whether to apply the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version 
	* @param Adjustment $adjustment Properties of the shipping adjustment to apply to the order.
	* @return MozuClient
	*/
	public static function applyShippingAdjustmentClient($adjustment, $orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = AdjustmentUrl::applyShippingAdjustmentUrl($orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($adjustment);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Applies a price adjustment to the specified order.
	*
	* @param string $orderId Unique identifier of the order for which to apply the adjustment.
	* @param string $updateMode Specifies whether to apply the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version 
	* @param Adjustment $adjustment Properties of the price adjustment to apply to the order.
	* @return MozuClient
	*/
	public static function applyAdjustmentClient($adjustment, $orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = AdjustmentUrl::applyAdjustmentUrl($orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($adjustment);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $updateMode Specifies whether to remove the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version 
	* @return MozuClient
	*/
	public static function removeShippingAdjustmentClient($orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = AdjustmentUrl::removeShippingAdjustmentUrl($orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	/**
	* Removes a price adjustment from the specified order.
	*
	* @param string $orderId Unique identifier of the order for which to delete the adjustment.
	* @param string $updateMode Specifies whether to remove the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param string $version 
	* @return MozuClient
	*/
	public static function removeAdjustmentClient($orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$userAuthTicket= null)
	{
		$url = AdjustmentUrl::removeAdjustmentUrl($orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($userAuthTicket);
		return $mozuClient;

	}
	
	
}

?>


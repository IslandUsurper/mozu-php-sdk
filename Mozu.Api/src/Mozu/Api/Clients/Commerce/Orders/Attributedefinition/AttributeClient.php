<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Orders\Attributedefinition;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Orders\Attributedefinition\AttributeUrl;

/**
* Attributes for orders creates extensibility for the way we describe orders.
*/
class AttributeClient {

	/**
	* Retrieves an existing order attribute by providing the name and namespace.
	*
	* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @return MozuClient
	*/
	public static function getAttributeByNameClient($fqn)
	{
		$url = AttributeUrl::getAttributeByNameUrl($fqn);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a list of order attributes according to any filter criteria or sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return MozuClient
	*/
	public static function getAttributesClient($filter, $pageSize, $sortBy, $startIndex)
	{
		$url = AttributeUrl::getAttributesUrl($filter, $pageSize, $sortBy, $startIndex);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Retrieves a single existing order attribute.
	*
	* @param int $attributeId Identifier of the single order attribute to retrieve.
	* @return MozuClient
	*/
	public static function getAttributeClient($attributeId)
	{
		$url = AttributeUrl::getAttributeUrl($attributeId);
		$verb = "GET";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Create a new attribute to associate with an order.
	*
	* @param Attribute $attribute The properties of the order attribute to create.
	* @return MozuClient
	*/
	public static function createAttributeClient($attribute)
	{
		$url = AttributeUrl::createAttributeUrl();
		$verb = "POST";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($attribute);
		return $mozuClient;

	}
	
	/**
	* Update an existing order attribute.
	*
	* @param int $attributeId Unique identifier of the attribute.
	* @param Attribute $attribute The properties of the order attribute being updated.
	* @return MozuClient
	*/
	public static function updateAttributeClient($attributeId, $attribute)
	{
		$url = AttributeUrl::updateAttributeUrl($attributeId);
		$verb = "PUT";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url)->withBody($attribute);
		return $mozuClient;

	}
	
	/**
	* Delete an existing order attribute.
	*
	* @param int $attributeId Unique identifier of the attribute.
	*/
	public static function deleteAttributeClient($attributeId)
	{
		$url = AttributeUrl::deleteAttributeUrl($attributeId);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* Deletes an order attribute by specifying the fully qualified name of the attribute.
	*
	* @param string $fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
	*/
	public static function deleteAttributeByNameClient($fqn)
	{
		$url = AttributeUrl::deleteAttributeByNameUrl($fqn);
		$verb = "DELETE";
		$mozuClient = new MozuClient();
		$mozuClient->withVerb($verb)
				->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>


<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\OrderUrl;

/**
* 
*/
class OrderClient {

	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getOrdersClient($filter =  null, $pageSize =  null, $q =  null, $qLimit =  null, $sortBy =  null, $startIndex =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::getOrdersUrl($filter, $pageSize, $q, $qLimit, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @return MozuClient
	*/
	public static function getAvailableActionsClient( $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::getAvailableActionsUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @return MozuClient
	*/
	public static function getTaxableOrdersClient( $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::getTaxableOrdersUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $draft 
	* @param string $orderId 
	* @return MozuClient
	*/
	public static function getOrderClient( $orderId, $draft =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::getOrderUrl($draft, $orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param Order $order 
	* @return MozuClient
	*/
	public static function createOrderClient($order, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::createOrderUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($order);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $cartId 
	* @return MozuClient
	*/
	public static function createOrderFromCartClient( $cartId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::createOrderFromCartUrl($cartId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param OrderAction $action 
	* @return MozuClient
	*/
	public static function performOrderActionClient($action,  $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::performOrderActionUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($action);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $discountId 
	* @param string $orderId 
	* @param string $updateMode 
	* @param string $version 
	* @param AppliedDiscount $discount 
	* @return MozuClient
	*/
	public static function updateOrderDiscountClient($discount,  $discountId,  $orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::updateOrderDiscountUrl($discountId, $orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($discount);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $version 
	*/
	public static function deleteOrderDraftClient( $orderId, $version =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::deleteOrderDraftUrl($orderId, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @return MozuClient
	*/
	public static function changeOrderUserIdClient( $orderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::changeOrderUserIdUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $updateMode 
	* @param string $version 
	* @param Order $order 
	* @return MozuClient
	*/
	public static function updateOrderClient($order,  $orderId, $updateMode =  null, $version =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = OrderUrl::updateOrderUrl($orderId, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($order);
		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


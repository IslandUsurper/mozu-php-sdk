<?php


/**
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Content\Documentlists;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Content\Documentlists\FolderUrl;
use Mozu\Api\DataViewMode;
use Mozu\Api\Headers;

/**
* Use the folders subresource to organize content into folders.
*/
class FolderClient {

	/**
	* Retrieves the properties of an existing folder.
	*
	* @param string $documentListName The name of the document list associated with the folder to retrieve.
	* @param string $folderId The unique identifier of the folder to retrieve.
	* @return MozuClient
	*/
	public static function getFolderClient($dataViewMode, $documentListName, $folderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = FolderUrl::getFolderUrl($documentListName, $folderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Retrieve a list of content folders according to any filter and sort criteria.
	*
	* @param string $documentListName The name of the document list that contains this folder.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $sort The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param int $startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return MozuClient
	*/
	public static function getFoldersClient($dataViewMode, $documentListName, $filter, $pageSize =  null, $startIndex =  null, $sort =  null, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = FolderUrl::getFoldersUrl($documentListName, $filter, $pageSize, $sort, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Creates a new folder.
	*
	* @param string $documentListName The name of the document list for which to create a new folder.
	* @param Folder $folder The name of the newly created folder.
	* @return MozuClient
	*/
	public static function createFolderClient($dataViewMode, $folder, $documentListName, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = FolderUrl::createFolderUrl($documentListName);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($folder)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Updates an existing content folder in a document list.
	*
	* @param string $documentListName The name of the document list that contains this folder.
	* @param string $folderId Unique identifier of the folder.
	* @param Folder $folder Properties of the folder to update.
	* @return MozuClient
	*/
	public static function updateFolderClient($dataViewMode, $folder, $documentListName, $folderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = FolderUrl::updateFolderUrl($documentListName, $folderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($folder)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	/**
	* Deletes a folder of documents from the specified document list.
	*
	* @param string $documentListName The name of the document list associated with the folder to delete.
	* @param string $folderId The unique identifier of the folder to delete.
	*/
	public static function deleteFolderClient($dataViewMode, $documentListName, $folderId, Mozu\Api\Security\AuthTicket &$authTicket= null)
	{
		$url = FolderUrl::deleteFolderUrl($documentListName, $folderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode)
;		if ($authTicket != null)
			$mozuClient = $mozuClient->withUserAuth($authTicket);
		return $mozuClient;

	}
	
	
}

?>


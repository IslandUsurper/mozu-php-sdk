<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\Core;



/**
*	System-supplied and read-only information about the user.
*/
class UserSystemData
{
	/**
	*If true, the login requires a password change for increased security. If false, the login does not require a password change.
	*/
	public $IsPasswordChangeRequired;
	public function getIsPasswordChangeRequired() {
		return $this->IsPasswordChangeRequired;
	}
	
	public function setIsPasswordChangeRequired($isPasswordChangeRequired) {
		$this->IsPasswordChangeRequired = $isPasswordChangeRequired;
		return $this;
	}

	/**
	*When the user's account was last locked. System-supplied and read-only.
	*/
	public $LastLockedOn;
	public function getLastLockedOn() {
		return $this->LastLockedOn;
	}
	
	public function setLastLockedOn($lastLockedOn) {
		$this->LastLockedOn = $lastLockedOn;
		return $this;
	}

	/**
	* When the user last logged into the store. System-supplied and read-only.
	*/
	public $LastLoginOn;
	public function getLastLoginOn() {
		return $this->LastLoginOn;
	}
	
	public function setLastLoginOn($lastLoginOn) {
		$this->LastLoginOn = $lastLoginOn;
		return $this;
	}

	/**
	* When the password was last modified. System-supplied and read-only.
	*/
	public $LastPasswordChangeOn;
	public function getLastPasswordChangeOn() {
		return $this->LastPasswordChangeOn;
	}
	
	public function setLastPasswordChangeOn($lastPasswordChangeOn) {
		$this->LastPasswordChangeOn = $lastPasswordChangeOn;
		return $this;
	}

	/**
	*The number of login attempts left for the user. The user must login successfully before this value reaches zero otherwise the account will be locked.
	*/
	public $RemainingLoginAttempts;
	public function getRemainingLoginAttempts() {
		return $this->RemainingLoginAttempts;
	}
	
	public function setRemainingLoginAttempts($remainingLoginAttempts) {
		$this->RemainingLoginAttempts = $remainingLoginAttempts;
		return $this;
	}

	/**
	*Date and time when the entity was last updated, represented in UTC Date/Time.
	*/
	public $UpdatedOn;
	public function getUpdatedOn() {
		return $this->UpdatedOn;
	}
	
	public function setUpdatedOn($updatedOn) {
		$this->UpdatedOn = $updatedOn;
		return $this;
	}

	/**
	*Date and time when the entity was created, represented in UTC Date/Time.
	*/
	public $CreatedOn;
	public function getCreatedOn() {
		return $this->CreatedOn;
	}
	
	public function setCreatedOn($createdOn) {
		$this->CreatedOn = $createdOn;
		return $this;
	}

	/**
	*The number of failed authentication attempts associated with the user.
	*/
	public $FailedLoginAttemptCount;
	public function getFailedLoginAttemptCount() {
		return $this->FailedLoginAttemptCount;
	}
	
	public function setFailedLoginAttemptCount($failedLoginAttemptCount) {
		$this->FailedLoginAttemptCount = $failedLoginAttemptCount;
		return $this;
	}

	/**
	*The date and time the initial login was unsuccessful. Each time a user attempts to authenticate and it fails, an update occurs on this field. System-supplied and read-only.
	*/
	public $FirstFailedLoginAttemptOn;
	public function getFirstFailedLoginAttemptOn() {
		return $this->FirstFailedLoginAttemptOn;
	}
	
	public function setFirstFailedLoginAttemptOn($firstFailedLoginAttemptOn) {
		$this->FirstFailedLoginAttemptOn = $firstFailedLoginAttemptOn;
		return $this;
	}

	/**
	*If true, the user account is locked due to multiple failed authentication attempts.
	*/
	public $IsLocked;
	public function getIsLocked() {
		return $this->IsLocked;
	}
	
	public function setIsLocked($isLocked) {
		$this->IsLocked = $isLocked;
		return $this;
	}

}

?>

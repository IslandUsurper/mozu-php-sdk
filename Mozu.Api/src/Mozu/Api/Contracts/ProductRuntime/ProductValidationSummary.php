<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductRuntime;



/**
*	Summary list of the product validation in a storefront, including options selected by the shopper.
*/
class ProductValidationSummary
{
	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	public $isTaxable;
	public function getIsTaxable() {
		return $this->isTaxable;
	}
	
	public function setIsTaxable($isTaxable) {
		$this->isTaxable = $isTaxable;
		return $this;
	}

	/**
	*"Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	*/
	public $productCode;
	public function getProductCode() {
		return $this->productCode;
	}
	
	public function setProductCode($productCode) {
		$this->productCode = $productCode;
		return $this;
	}

	/**
	*The descriptive brief product name.
	*/
	public $productName;
	public function getProductName() {
		return $this->productName;
	}
	
	public function setProductName($productName) {
		$this->productName = $productName;
		return $this;
	}

	/**
	*Brief description of the product typically used when the product is displayed in a list or in search results.
	*/
	public $productShortDescription;
	public function getProductShortDescription() {
		return $this->productShortDescription;
	}
	
	public function setProductShortDescription($productShortDescription) {
		$this->productShortDescription = $productShortDescription;
		return $this;
	}

		public $productUsage;
	public function getProductUsage() {
		return $this->productUsage;
	}
	
	public function setProductUsage($productUsage) {
		$this->productUsage = $productUsage;
		return $this;
	}

	/**
	*Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	*/
	public $variationProductCode;
	public function getVariationProductCode() {
		return $this->variationProductCode;
	}
	
	public function setVariationProductCode($variationProductCode) {
		$this->variationProductCode = $variationProductCode;
		return $this;
	}

		public $bundledProducts;
	public function getBundledProducts() {
		return $this->bundledProducts;
	}
	
	public function setBundledProducts($bundledProducts) {
		$this->bundledProducts = $bundledProducts;
		return $this;
	}

	/**
	*The list of product categories for the storefront.
	*/
	public $categories;
	public function getCategories() {
		return $this->categories;
	}
	
	public function setCategories($categories) {
		$this->categories = $categories;
		return $this;
	}

	/**
	*The image configured for the product on the storefront.
	*/
	public $image;
	public function getImage() {
		return $this->image;
	}
	
	public function setImage($image) {
		$this->image = $image;
		return $this;
	}

		public $inventoryInfo;
	public function getInventoryInfo() {
		return $this->inventoryInfo;
	}
	
	public function setInventoryInfo($inventoryInfo) {
		$this->inventoryInfo = $inventoryInfo;
		return $this;
	}

	/**
	*Dimensions of the packaged product.
	*/
	public $measurements;
	public function getMeasurements() {
		return $this->measurements;
	}
	
	public function setMeasurements($measurements) {
		$this->measurements = $measurements;
		return $this;
	}

	/**
	*Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
	*/
	public $price;
	public function getPrice() {
		return $this->price;
	}
	
	public function setPrice($price) {
		$this->price = $price;
		return $this;
	}

	/**
	*The list of product properties configured in product admin.
	*/
	public $properties;
	public function getProperties() {
		return $this->properties;
	}
	
	public function setProperties($properties) {
		$this->properties = $properties;
		return $this;
	}

	/**
	*The current state of the product and whether or not it is available for purchasing. If the product is not eligible for purchase, the validation message is included.
	*/
	public $purchasableState;
	public function getPurchasableState() {
		return $this->purchasableState;
	}
	
	public function setPurchasableState($purchasableState) {
		$this->purchasableState = $purchasableState;
		return $this;
	}

}

?>

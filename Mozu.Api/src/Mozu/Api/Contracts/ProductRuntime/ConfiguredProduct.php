<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductRuntime;



/**
*	Properties of a created product selection.
*/
class ConfiguredProduct
{
	/**
	*"Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	*/
	public $productCode;
	public function getProductCode() {
		return $this->productCode;
	}
	
	public function setProductCode($productCode) {
		$this->productCode = $productCode;
		return $this;
	}

	/**
	*Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	*/
	public $variationProductCode;
	public function getVariationProductCode() {
		return $this->variationProductCode;
	}
	
	public function setVariationProductCode($variationProductCode) {
		$this->variationProductCode = $variationProductCode;
		return $this;
	}

	/**
	*List of shipping discounts that can be applied to the configured product.
	*/
	public $availableShippingDiscounts;
	public function getAvailableShippingDiscounts() {
		return $this->availableShippingDiscounts;
	}
	
	public function setAvailableShippingDiscounts($availableShippingDiscounts) {
		$this->availableShippingDiscounts = $availableShippingDiscounts;
		return $this;
	}

		public $inventoryInfo;
	public function getInventoryInfo() {
		return $this->inventoryInfo;
	}
	
	public function setInventoryInfo($inventoryInfo) {
		$this->inventoryInfo = $inventoryInfo;
		return $this;
	}

	/**
	*Dimensions of the packaged product.
	*/
	public $measurements;
	public function getMeasurements() {
		return $this->measurements;
	}
	
	public function setMeasurements($measurements) {
		$this->measurements = $measurements;
		return $this;
	}

	/**
	*The list of options set up in product admin.
	*/
	public $options;
	public function getOptions() {
		return $this->options;
	}
	
	public function setOptions($options) {
		$this->options = $options;
		return $this;
	}

	/**
	*Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
	*/
	public $price;
	public function getPrice() {
		return $this->price;
	}
	
	public function setPrice($price) {
		$this->price = $price;
		return $this;
	}

	/**
	*For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
	*/
	public $priceRange;
	public function getPriceRange() {
		return $this->priceRange;
	}
	
	public function setPriceRange($priceRange) {
		$this->priceRange = $priceRange;
		return $this;
	}

	/**
	*The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
	*/
	public $purchasableState;
	public function getPurchasableState() {
		return $this->purchasableState;
	}
	
	public function setPurchasableState($purchasableState) {
		$this->purchasableState = $purchasableState;
		return $this;
	}

}

?>

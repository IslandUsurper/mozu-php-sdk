<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductRuntime;



/**
*	Properties of the product that appears on the site storefront.
*/
class Product
{
	/**
	*Identifier of the attribute set.
	*/
	public $AttributeSetId;
	public function getAttributeSetId() {
		return $this->AttributeSetId;
	}
	
	public function setAttributeSetId($attributeSetId) {
		$this->AttributeSetId = $attributeSetId;
		return $this;
	}

	/**
	*Date and time when the entity was created, represented in UTC Date/Time.
	*/
	public $CreateDate;
	public function getCreateDate() {
		return $this->CreateDate;
	}
	
	public function setCreateDate($createDate) {
		$this->CreateDate = $createDate;
		return $this;
	}

	/**
	*If true, the product is marked as available for sale. Setting a product to IsActive = false will prevent it from being shown on the customer facing storefront.
	*/
	public $IsActive;
	public function getIsActive() {
		return $this->IsActive;
	}
	
	public function setIsActive($isActive) {
		$this->IsActive = $isActive;
		return $this;
	}

	/**
	*If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	public $IsRecurring;
	public function getIsRecurring() {
		return $this->IsRecurring;
	}
	
	public function setIsRecurring($isRecurring) {
		$this->IsRecurring = $isRecurring;
		return $this;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	public $IsTaxable;
	public function getIsTaxable() {
		return $this->IsTaxable;
	}
	
	public function setIsTaxable($isTaxable) {
		$this->IsTaxable = $isTaxable;
		return $this;
	}

	/**
	*Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	*/
	public $ProductCode;
	public function getProductCode() {
		return $this->ProductCode;
	}
	
	public function setProductCode($productCode) {
		$this->ProductCode = $productCode;
		return $this;
	}

		public $ProductSequence;
	public function getProductSequence() {
		return $this->ProductSequence;
	}
	
	public function setProductSequence($productSequence) {
		$this->ProductSequence = $productSequence;
		return $this;
	}

	/**
	*A product type is like a product template that can be reused.
	*/
	public $ProductType;
	public function getProductType() {
		return $this->ProductType;
	}
	
	public function setProductType($productType) {
		$this->ProductType = $productType;
		return $this;
	}

	/**
	*The universal product code (UPC code) of the product.
	*/
	public $UPC;
	public function getUPC() {
		return $this->UPC;
	}
	
	public function setUPC($uPC) {
		$this->UPC = $uPC;
		return $this;
	}

	/**
	*List of shipping discounts that can be applied to the product.
	*/
	public $AvailableShippingDiscounts;
	public function getAvailableShippingDiscounts() {
		return $this->AvailableShippingDiscounts;
	}
	
	public function setAvailableShippingDiscounts($availableShippingDiscounts) {
		$this->AvailableShippingDiscounts = $availableShippingDiscounts;
		return $this;
	}

	/**
	*List of categories associated with the product.
	*/
	public $Categories;
	public function getCategories() {
		return $this->Categories;
	}
	
	public function setCategories($categories) {
		$this->Categories = $categories;
		return $this;
	}

	/**
	*Complex type that contains content for a language specified by LocaleCode.
	*/
	public $Content;
	public function getContent() {
		return $this->Content;
	}
	
	public function setContent($content) {
		$this->Content = $content;
		return $this;
	}

	/**
	*Dimensions of the packaged product.
	*/
	public $Measurements;
	public function getMeasurements() {
		return $this->Measurements;
	}
	
	public function setMeasurements($measurements) {
		$this->Measurements = $measurements;
		return $this;
	}

	/**
	*The list of options set up in product admin.
	*/
	public $Options;
	public function getOptions() {
		return $this->Options;
	}
	
	public function setOptions($options) {
		$this->Options = $options;
		return $this;
	}

	/**
	*Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
	*/
	public $Price;
	public function getPrice() {
		return $this->Price;
	}
	
	public function setPrice($price) {
		$this->Price = $price;
		return $this;
	}

	/**
	*For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
	*/
	public $PriceRange;
	public function getPriceRange() {
		return $this->PriceRange;
	}
	
	public function setPriceRange($priceRange) {
		$this->PriceRange = $priceRange;
		return $this;
	}

	/**
	*The list of product properties set up in product admin.
	*/
	public $Properties;
	public function getProperties() {
		return $this->Properties;
	}
	
	public function setProperties($properties) {
		$this->Properties = $properties;
		return $this;
	}

	/**
	*The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
	*/
	public $PurchasableState;
	public function getPurchasableState() {
		return $this->PurchasableState;
	}
	
	public function setPurchasableState($purchasableState) {
		$this->PurchasableState = $purchasableState;
		return $this;
	}

	/**
	*The number of products accounted for in inventory that are available for purchase.
	*/
	public $Stock;
	public function getStock() {
		return $this->Stock;
	}
	
	public function setStock($stock) {
		$this->Stock = $stock;
		return $this;
	}

}

?>

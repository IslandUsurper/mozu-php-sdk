<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\Tenant;



/**
*	A Mozu tenant is a scope that can create roles and assign behaviors to a role.
*/
class Tenant
{
	/**
	*Date and time when the entity was created, represented in UTC Date/Time.
	*/
	public $CreateDate;
	public function getCreateDate() {
		return $this->CreateDate;
	}
	
	public function setCreateDate($createDate) {
		$this->CreateDate = $createDate;
		return $this;
	}

	/**
	*Alphanumeric identifier of the customer.
	*/
	public $CustomerId;
	public function getCustomerId() {
		return $this->CustomerId;
	}
	
	public function setCustomerId($customerId) {
		$this->CustomerId = $customerId;
		return $this;
	}

		public $DeleteDate;
	public function getDeleteDate() {
		return $this->DeleteDate;
	}
	
	public function setDeleteDate($deleteDate) {
		$this->DeleteDate = $deleteDate;
		return $this;
	}

	/**
	*Numeric identifier of the developer account.
	*/
	public $DevAccountId;
	public function getDevAccountId() {
		return $this->DevAccountId;
	}
	
	public function setDevAccountId($devAccountId) {
		$this->DevAccountId = $devAccountId;
		return $this;
	}

	/**
	*Identifier of the Mozu tenant.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

		public $IsDeleted;
	public function getIsDeleted() {
		return $this->IsDeleted;
	}
	
	public function setIsDeleted($isDeleted) {
		$this->IsDeleted = $isDeleted;
		return $this;
	}

	/**
	*If true, the tenant is a development store.
	*/
	public $IsDevTenant;
	public function getIsDevTenant() {
		return $this->IsDevTenant;
	}
	
	public function setIsDevTenant($isDevTenant) {
		$this->IsDevTenant = $isDevTenant;
		return $this;
	}

	/**
	*The name of the tenant, if applicable.
	*/
	public $Name;
	public function getName() {
		return $this->Name;
	}
	
	public function setName($name) {
		$this->Name = $name;
		return $this;
	}

	/**
	*Identifier of the ZuKeeper scale unit this tenant belongs to.
	*/
	public $ScaleUnitId;
	public function getScaleUnitId() {
		return $this->ScaleUnitId;
	}
	
	public function setScaleUnitId($scaleUnitId) {
		$this->ScaleUnitId = $scaleUnitId;
		return $this;
	}

	/**
	*Current status of this tenant.
	*/
	public $Status;
	public function getStatus() {
		return $this->Status;
	}
	
	public function setStatus($status) {
		$this->Status = $status;
		return $this;
	}

	/**
	*Date and time when the entity was last updated, represented in UTC Date/Time.
	*/
	public $UpdateDate;
	public function getUpdateDate() {
		return $this->UpdateDate;
	}
	
	public function setUpdateDate($updateDate) {
		$this->UpdateDate = $updateDate;
		return $this;
	}

	/**
	*The domain information associated with the tenant.
	*/
	public $Domain;
	public function getDomain() {
		return $this->Domain;
	}
	
	public function setDomain($domain) {
		$this->Domain = $domain;
		return $this;
	}

	/**
	*List of site groups associated with this tenant, if applicable.
	*/
	public $SiteGroups;
	public function getSiteGroups() {
		return $this->SiteGroups;
	}
	
	public function setSiteGroups($siteGroups) {
		$this->SiteGroups = $siteGroups;
		return $this;
	}

}

?>

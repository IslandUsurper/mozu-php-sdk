<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\CommerceRuntime\Carts;



/**
*	Properties of an item added to an active shopping cart.
*/
class CartItem
{
		public $DiscountedTotal;
	public function getDiscountedTotal() {
		return $this->DiscountedTotal;
	}
	
	public function setDiscountedTotal($discountedTotal) {
		$this->DiscountedTotal = $discountedTotal;
		return $this;
	}

	/**
	*The total amount discounted from an item.
	*/
	public $DiscountTotal;
	public function getDiscountTotal() {
		return $this->DiscountTotal;
	}
	
	public function setDiscountTotal($discountTotal) {
		$this->DiscountTotal = $discountTotal;
		return $this;
	}

		public $ExtendedTotal;
	public function getExtendedTotal() {
		return $this->ExtendedTotal;
	}
	
	public function setExtendedTotal($extendedTotal) {
		$this->ExtendedTotal = $extendedTotal;
		return $this;
	}

	/**
	*The total amount of all fees incurred for the item.
	*/
	public $FeeTotal;
	public function getFeeTotal() {
		return $this->FeeTotal;
	}
	
	public function setFeeTotal($feeTotal) {
		$this->FeeTotal = $feeTotal;
		return $this;
	}

	/**
	*Unique identifier of the cart item.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*If true, the item can be purchased or fulfilled at regular intervals, such as a monthly billing cycle. For example, digital or physical product subscriptions are recurring cart items.
	*/
	public $IsRecurring;
	public function getIsRecurring() {
		return $this->IsRecurring;
	}
	
	public function setIsRecurring($isRecurring) {
		$this->IsRecurring = $isRecurring;
		return $this;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	public $IsTaxable;
	public function getIsTaxable() {
		return $this->IsTaxable;
	}
	
	public function setIsTaxable($isTaxable) {
		$this->IsTaxable = $isTaxable;
		return $this;
	}

	/**
	*The total amount of tax for the item in the cart.
	*/
	public $ItemTaxTotal;
	public function getItemTaxTotal() {
		return $this->ItemTaxTotal;
	}
	
	public function setItemTaxTotal($itemTaxTotal) {
		$this->ItemTaxTotal = $itemTaxTotal;
		return $this;
	}

	/**
	*Language used for the entity. Currently, only "en-US" is supported.
	*/
	public $LocaleCode;
	public function getLocaleCode() {
		return $this->LocaleCode;
	}
	
	public function setLocaleCode($localeCode) {
		$this->LocaleCode = $localeCode;
		return $this;
	}

	/**
	*The specified quantity of the cart item.
	*/
	public $Quantity;
	public function getQuantity() {
		return $this->Quantity;
	}
	
	public function setQuantity($quantity) {
		$this->Quantity = $quantity;
		return $this;
	}

	/**
	*The total amount of tax incurred on the shipping charges in the cart.
	*/
	public $ShippingTaxTotal;
	public function getShippingTaxTotal() {
		return $this->ShippingTaxTotal;
	}
	
	public function setShippingTaxTotal($shippingTaxTotal) {
		$this->ShippingTaxTotal = $shippingTaxTotal;
		return $this;
	}

	/**
	*The estimated total amount of shipping fees for the item in the cart.
	*/
	public $ShippingTotal;
	public function getShippingTotal() {
		return $this->ShippingTotal;
	}
	
	public function setShippingTotal($shippingTotal) {
		$this->ShippingTotal = $shippingTotal;
		return $this;
	}

	/**
	*Estimated amount of the item in the cart without sales tax, shipping costs, and other fees.
	*/
	public $Subtotal;
	public function getSubtotal() {
		return $this->Subtotal;
	}
	
	public function setSubtotal($subtotal) {
		$this->Subtotal = $subtotal;
		return $this;
	}

	/**
	*The amount of the item in the cart that is subject to tax. This amount typically represents the cart item subtotal before applied discounts.
	*/
	public $TaxableTotal;
	public function getTaxableTotal() {
		return $this->TaxableTotal;
	}
	
	public function setTaxableTotal($taxableTotal) {
		$this->TaxableTotal = $taxableTotal;
		return $this;
	}

	/**
	*Estimated total amount of the item, including the product price, sales tax, shipping costs, and other fees.
	*/
	public $Total;
	public function getTotal() {
		return $this->Total;
	}
	
	public function setTotal($total) {
		$this->Total = $total;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*The properties of the associated product.
	*/
	public $Product;
	public function getProduct() {
		return $this->Product;
	}
	
	public function setProduct($product) {
		$this->Product = $product;
		return $this;
	}

	/**
	*List of product-level discounts projected to apply to the cart at checkout.
	*/
	public $ProductDiscounts;
	public function getProductDiscounts() {
		return $this->ProductDiscounts;
	}
	
	public function setProductDiscounts($productDiscounts) {
		$this->ProductDiscounts = $productDiscounts;
		return $this;
	}

	/**
	*List of shipping discounts projected to apply to the cart at checkout.
	*/
	public $ShippingDiscounts;
	public function getShippingDiscounts() {
		return $this->ShippingDiscounts;
	}
	
	public function setShippingDiscounts($shippingDiscounts) {
		$this->ShippingDiscounts = $shippingDiscounts;
		return $this;
	}

	/**
	*The inventory properties associated with the cart item.
	*/
	public $Stock;
	public function getStock() {
		return $this->Stock;
	}
	
	public function setStock($stock) {
		$this->Stock = $stock;
		return $this;
	}

	/**
	*Properties of the unit price associated with the cart item.
	*/
	public $UnitPrice;
	public function getUnitPrice() {
		return $this->UnitPrice;
	}
	
	public function setUnitPrice($unitPrice) {
		$this->UnitPrice = $unitPrice;
		return $this;
	}

}

?>

<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\CommerceRuntime\Carts;



/**
*	Properties of an active shopping cart.
*/
class Cart
{
		public $DiscountedSubtotal;
	public function getDiscountedSubtotal() {
		return $this->DiscountedSubtotal;
	}
	
	public function setDiscountedSubtotal($discountedSubtotal) {
		$this->DiscountedSubtotal = $discountedSubtotal;
		return $this;
	}

	/**
	*The estimated total of the cart after all discounts have been applied.
	*/
	public $DiscountedTotal;
	public function getDiscountedTotal() {
		return $this->DiscountedTotal;
	}
	
	public function setDiscountedTotal($discountedTotal) {
		$this->DiscountedTotal = $discountedTotal;
		return $this;
	}

	/**
	*Estimated amount of discounts applied to all items in the cart. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	public $DiscountTotal;
	public function getDiscountTotal() {
		return $this->DiscountTotal;
	}
	
	public function setDiscountTotal($discountTotal) {
		$this->DiscountTotal = $discountTotal;
		return $this;
	}

	/**
	*Date in UTC Date/Time when the cart becomes inactive based on a system-calculated interval. For example, if an anonymous shopper has 14 days of inactivity, the cart is considered abandoned after that period of inactivity. System-supplied and read-only.
	*/
	public $ExpirationDate;
	public function getExpirationDate() {
		return $this->ExpirationDate;
	}
	
	public function setExpirationDate($expirationDate) {
		$this->ExpirationDate = $expirationDate;
		return $this;
	}

	/**
	*The monetary sum of all fees incurred in the cart.
	*/
	public $FeeTotal;
	public function getFeeTotal() {
		return $this->FeeTotal;
	}
	
	public function setFeeTotal($feeTotal) {
		$this->FeeTotal = $feeTotal;
		return $this;
	}

	/**
	*If the handling fee for the cart is subject to sales tax, the total tax amount.
	*/
	public $HandlingTaxTotal;
	public function getHandlingTaxTotal() {
		return $this->HandlingTaxTotal;
	}
	
	public function setHandlingTaxTotal($handlingTaxTotal) {
		$this->HandlingTaxTotal = $handlingTaxTotal;
		return $this;
	}

	/**
	*Unique identifier of the shopping cart.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
	*/
	public $ISOCurrencyCode;
	public function getISOCurrencyCode() {
		return $this->ISOCurrencyCode;
	}
	
	public function setISOCurrencyCode($iSOCurrencyCode) {
		$this->ISOCurrencyCode = $iSOCurrencyCode;
		return $this;
	}

	/**
	*The total amount of tax for items in the cart.
	*/
	public $ItemTaxTotal;
	public function getItemTaxTotal() {
		return $this->ItemTaxTotal;
	}
	
	public function setItemTaxTotal($itemTaxTotal) {
		$this->ItemTaxTotal = $itemTaxTotal;
		return $this;
	}

	/**
	*The date in UTC Date/Time when the items in the cart were last validated against the site's product catalog. System-supplied and read-only.
	*/
	public $LastValidationDate;
	public function getLastValidationDate() {
		return $this->LastValidationDate;
	}
	
	public function setLastValidationDate($lastValidationDate) {
		$this->LastValidationDate = $lastValidationDate;
		return $this;
	}

		public $ShippingSubTotal;
	public function getShippingSubTotal() {
		return $this->ShippingSubTotal;
	}
	
	public function setShippingSubTotal($shippingSubTotal) {
		$this->ShippingSubTotal = $shippingSubTotal;
		return $this;
	}

	/**
	*The total amount of tax incurred on the shipping charges in the cart.
	*/
	public $ShippingTaxTotal;
	public function getShippingTaxTotal() {
		return $this->ShippingTaxTotal;
	}
	
	public function setShippingTaxTotal($shippingTaxTotal) {
		$this->ShippingTaxTotal = $shippingTaxTotal;
		return $this;
	}

	/**
	*The total shipping amount estimated for the cart.
	*/
	public $ShippingTotal;
	public function getShippingTotal() {
		return $this->ShippingTotal;
	}
	
	public function setShippingTotal($shippingTotal) {
		$this->ShippingTotal = $shippingTotal;
		return $this;
	}

	/**
	*Unique identifier of the site group.
	*/
	public $SiteGroupId;
	public function getSiteGroupId() {
		return $this->SiteGroupId;
	}
	
	public function setSiteGroupId($siteGroupId) {
		$this->SiteGroupId = $siteGroupId;
		return $this;
	}

	/**
	*Unique identifier of the site.
	*/
	public $SiteId;
	public function getSiteId() {
		return $this->SiteId;
	}
	
	public function setSiteId($siteId) {
		$this->SiteId = $siteId;
		return $this;
	}

	/**
	*Estimated amount of the cart without sales tax, shipping costs, and other fees.
	*/
	public $Subtotal;
	public function getSubtotal() {
		return $this->Subtotal;
	}
	
	public function setSubtotal($subtotal) {
		$this->Subtotal = $subtotal;
		return $this;
	}

	/**
	*The total sum of sales tax estimated for a cart.
	*/
	public $TaxTotal;
	public function getTaxTotal() {
		return $this->TaxTotal;
	}
	
	public function setTaxTotal($taxTotal) {
		$this->TaxTotal = $taxTotal;
		return $this;
	}

	/**
	*Unique identifier of the Mozu tenant.
	*/
	public $TenantId;
	public function getTenantId() {
		return $this->TenantId;
	}
	
	public function setTenantId($tenantId) {
		$this->TenantId = $tenantId;
		return $this;
	}

	/**
	*Estimated total amount of the cart, including items, sales tax, shipping costs, and other fees.
	*/
	public $Total;
	public function getTotal() {
		return $this->Total;
	}
	
	public function setTotal($total) {
		$this->Total = $total;
		return $this;
	}

	/**
	*Unique identifier of the user associated with the shopping cart.
	*/
	public $UserId;
	public function getUserId() {
		return $this->UserId;
	}
	
	public function setUserId($userId) {
		$this->UserId = $userId;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*Messages logged or created each time the cart was modified.
	*/
	public $ChangeMessages;
	public function getChangeMessages() {
		return $this->ChangeMessages;
	}
	
	public function setChangeMessages($changeMessages) {
		$this->ChangeMessages = $changeMessages;
		return $this;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	public $Items;
	public function getItems() {
		return $this->Items;
	}
	
	public function setItems($items) {
		$this->Items = $items;
		return $this;
	}

	/**
	*List of order-level discounts projected to apply to the cart at checkout.
	*/
	public $OrderDiscounts;
	public function getOrderDiscounts() {
		return $this->OrderDiscounts;
	}
	
	public function setOrderDiscounts($orderDiscounts) {
		$this->OrderDiscounts = $orderDiscounts;
		return $this;
	}

	/**
	*Shipping information associated with the cart.
	*/
	public $ShippingInfo;
	public function getShippingInfo() {
		return $this->ShippingInfo;
	}
	
	public function setShippingInfo($shippingInfo) {
		$this->ShippingInfo = $shippingInfo;
		return $this;
	}

}

?>

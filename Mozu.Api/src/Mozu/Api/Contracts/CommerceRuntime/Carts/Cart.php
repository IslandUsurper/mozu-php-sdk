<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\CommerceRuntime\Carts;



/**
*	Properties of an active shopping cart.
*/
class Cart
{
		public $channelCode;
	public function getChannelCode() {
		return $this->channelCode;
	}
	
	public function setChannelCode($channelCode) {
		$this->channelCode = $channelCode;
		return $this;
	}

		public $currencyCode;
	public function getCurrencyCode() {
		return $this->currencyCode;
	}
	
	public function setCurrencyCode($currencyCode) {
		$this->currencyCode = $currencyCode;
		return $this;
	}

		public $customerInteractionType;
	public function getCustomerInteractionType() {
		return $this->customerInteractionType;
	}
	
	public function setCustomerInteractionType($customerInteractionType) {
		$this->customerInteractionType = $customerInteractionType;
		return $this;
	}

		public $discountedSubtotal;
	public function getDiscountedSubtotal() {
		return $this->discountedSubtotal;
	}
	
	public function setDiscountedSubtotal($discountedSubtotal) {
		$this->discountedSubtotal = $discountedSubtotal;
		return $this;
	}

	/**
	*The estimated total of the cart after all discounts have been applied.
	*/
	public $discountedTotal;
	public function getDiscountedTotal() {
		return $this->discountedTotal;
	}
	
	public function setDiscountedTotal($discountedTotal) {
		$this->discountedTotal = $discountedTotal;
		return $this;
	}

	/**
	*Estimated amount of discounts applied to all items in the cart. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	public $discountTotal;
	public function getDiscountTotal() {
		return $this->discountTotal;
	}
	
	public function setDiscountTotal($discountTotal) {
		$this->discountTotal = $discountTotal;
		return $this;
	}

	/**
	*Date in UTC Date/Time when the cart becomes inactive based on a system-calculated interval. For example, if an anonymous shopper has 14 days of inactivity, the cart is considered abandoned after that period of inactivity. System-supplied and read-only.
	*/
	public $expirationDate;
	public function getExpirationDate() {
		return $this->expirationDate;
	}
	
	public function setExpirationDate($expirationDate) {
		$this->expirationDate = $expirationDate;
		return $this;
	}

	/**
	*The monetary sum of all fees incurred in the cart.
	*/
	public $feeTotal;
	public function getFeeTotal() {
		return $this->feeTotal;
	}
	
	public function setFeeTotal($feeTotal) {
		$this->feeTotal = $feeTotal;
		return $this;
	}

	/**
	*If the handling fee for the cart is subject to sales tax, the total tax amount.
	*/
	public $handlingTaxTotal;
	public function getHandlingTaxTotal() {
		return $this->handlingTaxTotal;
	}
	
	public function setHandlingTaxTotal($handlingTaxTotal) {
		$this->handlingTaxTotal = $handlingTaxTotal;
		return $this;
	}

	/**
	*Unique identifier of the shopping cart.
	*/
	public $id;
	public function getId() {
		return $this->id;
	}
	
	public function setId($id) {
		$this->id = $id;
		return $this;
	}

	/**
	*The total amount of tax for items in the cart.
	*/
	public $itemTaxTotal;
	public function getItemTaxTotal() {
		return $this->itemTaxTotal;
	}
	
	public function setItemTaxTotal($itemTaxTotal) {
		$this->itemTaxTotal = $itemTaxTotal;
		return $this;
	}

	/**
	*The date in UTC Date/Time when the items in the cart were last validated against the site's product catalog. System-supplied and read-only.
	*/
	public $lastValidationDate;
	public function getLastValidationDate() {
		return $this->lastValidationDate;
	}
	
	public function setLastValidationDate($lastValidationDate) {
		$this->lastValidationDate = $lastValidationDate;
		return $this;
	}

		public $shippingSubTotal;
	public function getShippingSubTotal() {
		return $this->shippingSubTotal;
	}
	
	public function setShippingSubTotal($shippingSubTotal) {
		$this->shippingSubTotal = $shippingSubTotal;
		return $this;
	}

	/**
	*The total amount of tax incurred on the shipping charges in the cart.
	*/
	public $shippingTaxTotal;
	public function getShippingTaxTotal() {
		return $this->shippingTaxTotal;
	}
	
	public function setShippingTaxTotal($shippingTaxTotal) {
		$this->shippingTaxTotal = $shippingTaxTotal;
		return $this;
	}

	/**
	*The total shipping amount estimated for the cart.
	*/
	public $shippingTotal;
	public function getShippingTotal() {
		return $this->shippingTotal;
	}
	
	public function setShippingTotal($shippingTotal) {
		$this->shippingTotal = $shippingTotal;
		return $this;
	}

	/**
	*Unique identifier of the site.
	*/
	public $siteId;
	public function getSiteId() {
		return $this->siteId;
	}
	
	public function setSiteId($siteId) {
		$this->siteId = $siteId;
		return $this;
	}

	/**
	*Estimated amount of the cart without sales tax, shipping costs, and other fees.
	*/
	public $subtotal;
	public function getSubtotal() {
		return $this->subtotal;
	}
	
	public function setSubtotal($subtotal) {
		$this->subtotal = $subtotal;
		return $this;
	}

	/**
	*The total sum of sales tax estimated for a cart.
	*/
	public $taxTotal;
	public function getTaxTotal() {
		return $this->taxTotal;
	}
	
	public function setTaxTotal($taxTotal) {
		$this->taxTotal = $taxTotal;
		return $this;
	}

	/**
	*Unique identifier of the Mozu tenant.
	*/
	public $tenantId;
	public function getTenantId() {
		return $this->tenantId;
	}
	
	public function setTenantId($tenantId) {
		$this->tenantId = $tenantId;
		return $this;
	}

	/**
	*Estimated total amount of the cart, including items, sales tax, shipping costs, and other fees.
	*/
	public $total;
	public function getTotal() {
		return $this->total;
	}
	
	public function setTotal($total) {
		$this->total = $total;
		return $this;
	}

	/**
	*Unique identifier of the user associated with the shopping cart.
	*/
	public $userId;
	public function getUserId() {
		return $this->userId;
	}
	
	public function setUserId($userId) {
		$this->userId = $userId;
		return $this;
	}

		public $visitId;
	public function getVisitId() {
		return $this->visitId;
	}
	
	public function setVisitId($visitId) {
		$this->visitId = $visitId;
		return $this;
	}

		public $webSessionId;
	public function getWebSessionId() {
		return $this->webSessionId;
	}
	
	public function setWebSessionId($webSessionId) {
		$this->webSessionId = $webSessionId;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. System-supplied and read-only.
	*/
	public $auditInfo;
	public function getAuditInfo() {
		return $this->auditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->auditInfo = $auditInfo;
		return $this;
	}

	/**
	*Messages logged or created each time the cart was modified.
	*/
	public $changeMessages;
	public function getChangeMessages() {
		return $this->changeMessages;
	}
	
	public function setChangeMessages($changeMessages) {
		$this->changeMessages = $changeMessages;
		return $this;
	}

		public $fulfillmentInfo;
	public function getFulfillmentInfo() {
		return $this->fulfillmentInfo;
	}
	
	public function setFulfillmentInfo($fulfillmentInfo) {
		$this->fulfillmentInfo = $fulfillmentInfo;
		return $this;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	public $items;
	public function getItems() {
		return $this->items;
	}
	
	public function setItems($items) {
		$this->items = $items;
		return $this;
	}

	/**
	*List of order-level discounts projected to apply to the cart at checkout.
	*/
	public $orderDiscounts;
	public function getOrderDiscounts() {
		return $this->orderDiscounts;
	}
	
	public function setOrderDiscounts($orderDiscounts) {
		$this->orderDiscounts = $orderDiscounts;
		return $this;
	}

}

?>

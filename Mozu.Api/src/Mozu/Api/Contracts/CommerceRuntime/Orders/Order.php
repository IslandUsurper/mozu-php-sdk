<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\CommerceRuntime\Orders;



/**
*	All of the properties of the specified order.
*/
class Order
{
	/**
	*The available order, payment, and shipment actions a user can perform for the order.
	*/
	public $AvailableActions;
	public function getAvailableActions() {
		return $this->AvailableActions;
	}
	
	public function setAvailableActions($availableActions) {
		$this->AvailableActions = $availableActions;
		return $this;
	}

	/**
	*Date when the order was cancelled. System-supplied and read-only.
	*/
	public $CancelledDate;
	public function getCancelledDate() {
		return $this->CancelledDate;
	}
	
	public function setCancelledDate($cancelledDate) {
		$this->CancelledDate = $cancelledDate;
		return $this;
	}

	/**
	*Date when the order was closed. Closed order is an order that has been processed and the items shipped. System-supplied and read-only.
	*/
	public $ClosedDate;
	public function getClosedDate() {
		return $this->ClosedDate;
	}
	
	public function setClosedDate($closedDate) {
		$this->ClosedDate = $closedDate;
		return $this;
	}

	/**
	*Numeric identifer of the customer account.
	*/
	public $CustomerAccountId;
	public function getCustomerAccountId() {
		return $this->CustomerAccountId;
	}
	
	public function setCustomerAccountId($customerAccountId) {
		$this->CustomerAccountId = $customerAccountId;
		return $this;
	}

		public $DiscountedSubtotal;
	public function getDiscountedSubtotal() {
		return $this->DiscountedSubtotal;
	}
	
	public function setDiscountedSubtotal($discountedSubtotal) {
		$this->DiscountedSubtotal = $discountedSubtotal;
		return $this;
	}

	/**
	*The total amount of the order after all applicable discounts have been applied.
	*/
	public $DiscountedTotal;
	public function getDiscountedTotal() {
		return $this->DiscountedTotal;
	}
	
	public function setDiscountedTotal($discountedTotal) {
		$this->DiscountedTotal = $discountedTotal;
		return $this;
	}

	/**
	*Amount of discounts applied to all items in an order. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	public $DiscountTotal;
	public function getDiscountTotal() {
		return $this->DiscountTotal;
	}
	
	public function setDiscountTotal($discountTotal) {
		$this->DiscountTotal = $discountTotal;
		return $this;
	}

	/**
	*The email address of the specified user or the email address associated with the specified entity.
	*/
	public $Email;
	public function getEmail() {
		return $this->Email;
	}
	
	public function setEmail($email) {
		$this->Email = $email;
		return $this;
	}

	/**
	*The date when the order will no longer be active or considered abandoned. For example, if a guest or anonymous shoppper has 14 days of inactivity, the order is considered abandoned after that period of inactivity. An order never expires for shoppers who are logged into their account. Date in UTC Date/Time. System-supplied and read-only.
	*/
	public $ExpirationDate;
	public function getExpirationDate() {
		return $this->ExpirationDate;
	}
	
	public function setExpirationDate($expirationDate) {
		$this->ExpirationDate = $expirationDate;
		return $this;
	}

	/**
	*The monetary sum of all fees incurred in the order.
	*/
	public $FeeTotal;
	public function getFeeTotal() {
		return $this->FeeTotal;
	}
	
	public function setFeeTotal($feeTotal) {
		$this->FeeTotal = $feeTotal;
		return $this;
	}

	/**
	*The combined price for all items in the order, including all selected options but excluding any discounts.
	*/
	public $HandlingAmount;
	public function getHandlingAmount() {
		return $this->HandlingAmount;
	}
	
	public function setHandlingAmount($handlingAmount) {
		$this->HandlingAmount = $handlingAmount;
		return $this;
	}

	/**
	*If the handling fee for the order is subject to sales tax, the total tax amount.
	*/
	public $HandlingTaxTotal;
	public function getHandlingTaxTotal() {
		return $this->HandlingTaxTotal;
	}
	
	public function setHandlingTaxTotal($handlingTaxTotal) {
		$this->HandlingTaxTotal = $handlingTaxTotal;
		return $this;
	}

	/**
	*If true, the order has a draft that may include one or more uncommitted changes to the order or its components.
	*/
	public $HasDraft;
	public function getHasDraft() {
		return $this->HasDraft;
	}
	
	public function setHasDraft($hasDraft) {
		$this->HasDraft = $hasDraft;
		return $this;
	}

	/**
	*Identifier of the order.
	*/
	public $Id;
	public function getId() {
		return $this->Id;
	}
	
	public function setId($id) {
		$this->Id = $id;
		return $this;
	}

	/**
	*The IP address from which the order originated.
	*/
	public $IPAddress;
	public function getIPAddress() {
		return $this->IPAddress;
	}
	
	public function setIPAddress($iPAddress) {
		$this->IPAddress = $iPAddress;
		return $this;
	}

	/**
	*If true, this version of the order is a draft that might contain uncommitted changes.
	*/
	public $IsDraft;
	public function getIsDraft() {
		return $this->IsDraft;
	}
	
	public function setIsDraft($isDraft) {
		$this->IsDraft = $isDraft;
		return $this;
	}

	/**
	*3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
	*/
	public $ISOCurrencyCode;
	public function getISOCurrencyCode() {
		return $this->ISOCurrencyCode;
	}
	
	public function setISOCurrencyCode($iSOCurrencyCode) {
		$this->ISOCurrencyCode = $iSOCurrencyCode;
		return $this;
	}

	/**
	*If true, the order is exempt from applied sales tax.
	*/
	public $IsTaxExempt;
	public function getIsTaxExempt() {
		return $this->IsTaxExempt;
	}
	
	public function setIsTaxExempt($isTaxExempt) {
		$this->IsTaxExempt = $isTaxExempt;
		return $this;
	}

	/**
	*The total amount of tax applied to items in the order.
	*/
	public $ItemTaxTotal;
	public function getItemTaxTotal() {
		return $this->ItemTaxTotal;
	}
	
	public function setItemTaxTotal($itemTaxTotal) {
		$this->ItemTaxTotal = $itemTaxTotal;
		return $this;
	}

	/**
	*The date when the order was last validated against the product catalog. Date in UTC Date/Time. System-supplied and read-only.
	*/
	public $LastValidationDate;
	public function getLastValidationDate() {
		return $this->LastValidationDate;
	}
	
	public function setLastValidationDate($lastValidationDate) {
		$this->LastValidationDate = $lastValidationDate;
		return $this;
	}

		public $LocationCode;
	public function getLocationCode() {
		return $this->LocationCode;
	}
	
	public function setLocationCode($locationCode) {
		$this->LocationCode = $locationCode;
		return $this;
	}

	/**
	*The order number that displays on the storefront which differs from the order ID.
	*/
	public $OrderNumber;
	public function getOrderNumber() {
		return $this->OrderNumber;
	}
	
	public function setOrderNumber($orderNumber) {
		$this->OrderNumber = $orderNumber;
		return $this;
	}

	/**
	*Identifier of the cart prior to the customer proceeding to checkout.
	*/
	public $OriginalCartId;
	public function getOriginalCartId() {
		return $this->OriginalCartId;
	}
	
	public function setOriginalCartId($originalCartId) {
		$this->OriginalCartId = $originalCartId;
		return $this;
	}

	/**
	*If this order was created to fulfill an item replacement as part of a return merchandise authorization (RMA), the unique identifier of the return.
	*/
	public $ParentReturnId;
	public function getParentReturnId() {
		return $this->ParentReturnId;
	}
	
	public function setParentReturnId($parentReturnId) {
		$this->ParentReturnId = $parentReturnId;
		return $this;
	}

	/**
	*Status of the payment for the specified order.
	*/
	public $PaymentStatus;
	public function getPaymentStatus() {
		return $this->PaymentStatus;
	}
	
	public function setPaymentStatus($paymentStatus) {
		$this->PaymentStatus = $paymentStatus;
		return $this;
	}

	/**
	*Status of any returns associated with this order after it was completed.
	*/
	public $ReturnStatus;
	public function getReturnStatus() {
		return $this->ReturnStatus;
	}
	
	public function setReturnStatus($returnStatus) {
		$this->ReturnStatus = $returnStatus;
		return $this;
	}

	/**
	*The current status of the shipment of this order. Possible values are "Fulfilled" if the order has shipped and "Not Fulfilled" if the order has not shipped. At this time, an order cannot be partially shipped. System-supplied and read-only.
	*/
	public $ShipmentStatus;
	public function getShipmentStatus() {
		return $this->ShipmentStatus;
	}
	
	public function setShipmentStatus($shipmentStatus) {
		$this->ShipmentStatus = $shipmentStatus;
		return $this;
	}

		public $ShippingSubTotal;
	public function getShippingSubTotal() {
		return $this->ShippingSubTotal;
	}
	
	public function setShippingSubTotal($shippingSubTotal) {
		$this->ShippingSubTotal = $shippingSubTotal;
		return $this;
	}

	/**
	*The total amount of sales tax incurred for shipping charges on the order.
	*/
	public $ShippingTaxTotal;
	public function getShippingTaxTotal() {
		return $this->ShippingTaxTotal;
	}
	
	public function setShippingTaxTotal($shippingTaxTotal) {
		$this->ShippingTaxTotal = $shippingTaxTotal;
		return $this;
	}

	/**
	*Amount of the shipping fees for the order.
	*/
	public $ShippingTotal;
	public function getShippingTotal() {
		return $this->ShippingTotal;
	}
	
	public function setShippingTotal($shippingTotal) {
		$this->ShippingTotal = $shippingTotal;
		return $this;
	}

	/**
	*Unique identifier of the site group.
	*/
	public $SiteGroupId;
	public function getSiteGroupId() {
		return $this->SiteGroupId;
	}
	
	public function setSiteGroupId($siteGroupId) {
		$this->SiteGroupId = $siteGroupId;
		return $this;
	}

	/**
	*Unique identifier of the site.
	*/
	public $SiteId;
	public function getSiteId() {
		return $this->SiteId;
	}
	
	public function setSiteId($siteId) {
		$this->SiteId = $siteId;
		return $this;
	}

	/**
	*The device from which the order originated in the case of offline orders.
	*/
	public $SourceDevice;
	public function getSourceDevice() {
		return $this->SourceDevice;
	}
	
	public function setSourceDevice($sourceDevice) {
		$this->SourceDevice = $sourceDevice;
		return $this;
	}

	/**
	*The current status of this order. Possible values are "New", "Open", "Processing", "Closed", or "Cancelled". System-supplied and read-only.
	*/
	public $Status;
	public function getStatus() {
		return $this->Status;
	}
	
	public function setStatus($status) {
		$this->Status = $status;
		return $this;
	}

	/**
	*The date and time the order was submitted. System-supplied and read-only.
	*/
	public $SubmittedDate;
	public function getSubmittedDate() {
		return $this->SubmittedDate;
	}
	
	public function setSubmittedDate($submittedDate) {
		$this->SubmittedDate = $submittedDate;
		return $this;
	}

	/**
	*Amount of the order without sales tax, shipping costs, and other fees.
	*/
	public $Subtotal;
	public function getSubtotal() {
		return $this->Subtotal;
	}
	
	public function setSubtotal($subtotal) {
		$this->Subtotal = $subtotal;
		return $this;
	}

	/**
	*The total monetary sum of sales tax for the order.
	*/
	public $TaxTotal;
	public function getTaxTotal() {
		return $this->TaxTotal;
	}
	
	public function setTaxTotal($taxTotal) {
		$this->TaxTotal = $taxTotal;
		return $this;
	}

	/**
	*Unique identifier of the Mozu tenant.
	*/
	public $TenantId;
	public function getTenantId() {
		return $this->TenantId;
	}
	
	public function setTenantId($tenantId) {
		$this->TenantId = $tenantId;
		return $this;
	}

	/**
	*Amount of the order, including items, sales tax, shipping costs, and other fees.
	*/
	public $Total;
	public function getTotal() {
		return $this->Total;
	}
	
	public function setTotal($total) {
		$this->Total = $total;
		return $this;
	}

	/**
	*The total amount collected to date for the order.
	*/
	public $TotalCollected;
	public function getTotalCollected() {
		return $this->TotalCollected;
	}
	
	public function setTotalCollected($totalCollected) {
		$this->TotalCollected = $totalCollected;
		return $this;
	}

	/**
	*The current version number of the order.
	*/
	public $Version;
	public function getVersion() {
		return $this->Version;
	}
	
	public function setVersion($version) {
		$this->Version = $version;
		return $this;
	}

		public $VisitId;
	public function getVisitId() {
		return $this->VisitId;
	}
	
	public function setVisitId($visitId) {
		$this->VisitId = $visitId;
		return $this;
	}

		public $WebSessionId;
	public function getWebSessionId() {
		return $this->WebSessionId;
	}
	
	public function setWebSessionId($webSessionId) {
		$this->WebSessionId = $webSessionId;
		return $this;
	}

	/**
	*Properties of an ad-hoc price adjustment for an order.
	*/
	public $Adjustment;
	public function getAdjustment() {
		return $this->Adjustment;
	}
	
	public function setAdjustment($adjustment) {
		$this->Adjustment = $adjustment;
		return $this;
	}

	/**
	*Paged list collection of order attributes.
	*/
	public $Attributes;
	public function getAttributes() {
		return $this->Attributes;
	}
	
	public function setAttributes($attributes) {
		$this->Attributes = $attributes;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*Container for the customer billing information associated with an order.
	*/
	public $BillingInfo;
	public function getBillingInfo() {
		return $this->BillingInfo;
	}
	
	public function setBillingInfo($billingInfo) {
		$this->BillingInfo = $billingInfo;
		return $this;
	}

	/**
	*Paged list of notes entered when the order was modified.
	*/
	public $ChangeMessages;
	public function getChangeMessages() {
		return $this->ChangeMessages;
	}
	
	public function setChangeMessages($changeMessages) {
		$this->ChangeMessages = $changeMessages;
		return $this;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	public $Items;
	public function getItems() {
		return $this->Items;
	}
	
	public function setItems($items) {
		$this->Items = $items;
		return $this;
	}

	/**
	*Paged list collection of order notes.
	*/
	public $Notes;
	public function getNotes() {
		return $this->Notes;
	}
	
	public function setNotes($notes) {
		$this->Notes = $notes;
		return $this;
	}

	/**
	*List of order-level discounts that apply to the order.
	*/
	public $OrderDiscounts;
	public function getOrderDiscounts() {
		return $this->OrderDiscounts;
	}
	
	public function setOrderDiscounts($orderDiscounts) {
		$this->OrderDiscounts = $orderDiscounts;
		return $this;
	}

	/**
	*Wrapper for the physical packages shipped for the specified order.
	*/
	public $Packages;
	public function getPackages() {
		return $this->Packages;
	}
	
	public function setPackages($packages) {
		$this->Packages = $packages;
		return $this;
	}

	/**
	*Wrapper for a collection of payments associated with this order. An order can include any number of payments.
	*/
	public $Payments;
	public function getPayments() {
		return $this->Payments;
	}
	
	public function setPayments($payments) {
		$this->Payments = $payments;
		return $this;
	}

	/**
	*Properties of an ad-hoc price adjustment made for an order.
	*/
	public $ShippingAdjustment;
	public function getShippingAdjustment() {
		return $this->ShippingAdjustment;
	}
	
	public function setShippingAdjustment($shippingAdjustment) {
		$this->ShippingAdjustment = $shippingAdjustment;
		return $this;
	}

	/**
	*List of shipping discounts to apply to the order.
	*/
	public $ShippingDiscounts;
	public function getShippingDiscounts() {
		return $this->ShippingDiscounts;
	}
	
	public function setShippingDiscounts($shippingDiscounts) {
		$this->ShippingDiscounts = $shippingDiscounts;
		return $this;
	}

	/**
	*Container for the shipping information associated with the order.
	*/
	public $ShippingInfo;
	public function getShippingInfo() {
		return $this->ShippingInfo;
	}
	
	public function setShippingInfo($shippingInfo) {
		$this->ShippingInfo = $shippingInfo;
		return $this;
	}

	/**
	*A paged list collection of shopper notes for the order.
	*/
	public $ShopperNotes;
	public function getShopperNotes() {
		return $this->ShopperNotes;
	}
	
	public function setShopperNotes($shopperNotes) {
		$this->ShopperNotes = $shopperNotes;
		return $this;
	}

}

?>

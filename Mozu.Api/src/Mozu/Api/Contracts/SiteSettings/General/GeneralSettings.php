<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\SiteSettings\General;



/**
*	General settings used on the storefront site.
*/
class GeneralSettings
{
	/**
	*If true, the site allows entry of addresses not verified by an address validation service.
	*/
	public $allowInvalidAddresses;
	public function getAllowInvalidAddresses() {
		return $this->allowInvalidAddresses;
	}
	
	public function setAllowInvalidAddresses($allowInvalidAddresses) {
		$this->allowInvalidAddresses = $allowInvalidAddresses;
		return $this;
	}

	/**
	*The physical directory path or URL where the mobile favicon image file is stored. The favicon icon is generally 57x57 pixels. The icon appears on a mobile website or on the mobile device's OS Home.
	*/
	public $favIconMobilePath;
	public function getFavIconMobilePath() {
		return $this->favIconMobilePath;
	}
	
	public function setFavIconMobilePath($favIconMobilePath) {
		$this->favIconMobilePath = $favIconMobilePath;
		return $this;
	}

	/**
	*The physical directory path or URL where the mobile favicon image file is stored. The favicon icon is generally 16x16 pixels. The icon appears on a a browser tab as the website's mini logo or on a browser address bar, or next to the page name in a list of bookmarks.
	*/
	public $favIconPath;
	public function getFavIconPath() {
		return $this->favIconPath;
	}
	
	public function setFavIconPath($favIconPath) {
		$this->favIconPath = $favIconPath;
		return $this;
	}

	/**
	*The Google Analytics code associated with a particular store. This could be the web tracking code.
	*/
	public $googleAnalyticsCode;
	public function getGoogleAnalyticsCode() {
		return $this->googleAnalyticsCode;
	}
	
	public function setGoogleAnalyticsCode($googleAnalyticsCode) {
		$this->googleAnalyticsCode = $googleAnalyticsCode;
		return $this;
	}

	/**
	*If true, a service to verify addresses as valid is enabled for the site.
	*/
	public $isAddressValidationEnabled;
	public function getIsAddressValidationEnabled() {
		return $this->isAddressValidationEnabled;
	}
	
	public function setIsAddressValidationEnabled($isAddressValidationEnabled) {
		$this->isAddressValidationEnabled = $isAddressValidationEnabled;
		return $this;
	}

	/**
	*If true, the Google analytics for eCommerce is enabled for this site. If false, the analytics are not enabled.
	*/
	public $isGoogleAnalyticsEcommerceEnabled;
	public function getIsGoogleAnalyticsEcommerceEnabled() {
		return $this->isGoogleAnalyticsEcommerceEnabled;
	}
	
	public function setIsGoogleAnalyticsEcommerceEnabled($isGoogleAnalyticsEcommerceEnabled) {
		$this->isGoogleAnalyticsEcommerceEnabled = $isGoogleAnalyticsEcommerceEnabled;
		return $this;
	}

	/**
	*If true, enable Google analytics for this site. If false, analytics are not enabled.
	*/
	public $isGoogleAnalyticsEnabled;
	public function getIsGoogleAnalyticsEnabled() {
		return $this->isGoogleAnalyticsEnabled;
	}
	
	public function setIsGoogleAnalyticsEnabled($isGoogleAnalyticsEnabled) {
		$this->isGoogleAnalyticsEnabled = $isGoogleAnalyticsEnabled;
		return $this;
	}

		public $isMozuWebSite;
	public function getIsMozuWebSite() {
		return $this->isMozuWebSite;
	}
	
	public function setIsMozuWebSite($isMozuWebSite) {
		$this->isMozuWebSite = $isMozuWebSite;
		return $this;
	}

		public $isWishlistCreationEnabled;
	public function getIsWishlistCreationEnabled() {
		return $this->isWishlistCreationEnabled;
	}
	
	public function setIsWishlistCreationEnabled($isWishlistCreationEnabled) {
		$this->isWishlistCreationEnabled = $isWishlistCreationEnabled;
		return $this;
	}

	/**
	*They physical directory path or URL where the website logo is stored.
	*/
	public $logoPath;
	public function getLogoPath() {
		return $this->logoPath;
	}
	
	public function setLogoPath($logoPath) {
		$this->logoPath = $logoPath;
		return $this;
	}

	/**
	*The tagline or text that appears when hovering over the site logo.
	*/
	public $logoText;
	public function getLogoText() {
		return $this->logoText;
	}
	
	public function setLogoText($logoText) {
		$this->logoText = $logoText;
		return $this;
	}

	/**
	*The mobile theme is the storefront name for the theme.
	*/
	public $mobileTheme;
	public function getMobileTheme() {
		return $this->mobileTheme;
	}
	
	public function setMobileTheme($mobileTheme) {
		$this->mobileTheme = $mobileTheme;
		return $this;
	}

	/**
	*Email address to display on email messages sent from the site.
	*/
	public $replyToEmailAddress;
	public function getReplyToEmailAddress() {
		return $this->replyToEmailAddress;
	}
	
	public function setReplyToEmailAddress($replyToEmailAddress) {
		$this->replyToEmailAddress = $replyToEmailAddress;
		return $this;
	}

	/**
	*Email address to set up so that shoppers and users browsing the site can use to contact the merchant.
	*/
	public $senderEmailAddress;
	public function getSenderEmailAddress() {
		return $this->senderEmailAddress;
	}
	
	public function setSenderEmailAddress($senderEmailAddress) {
		$this->senderEmailAddress = $senderEmailAddress;
		return $this;
	}

	/**
	*Choose a format to use on the site: 12-hour (hh:mm:ss tt) or 24-hour format (HH:mm:ss).
	*/
	public $siteTimeFormat;
	public function getSiteTimeFormat() {
		return $this->siteTimeFormat;
	}
	
	public function setSiteTimeFormat($siteTimeFormat) {
		$this->siteTimeFormat = $siteTimeFormat;
		return $this;
	}

	/**
	*Choose the time zone to use for the site.
	*/
	public $siteTimeZone;
	public function getSiteTimeZone() {
		return $this->siteTimeZone;
	}
	
	public function setSiteTimeZone($siteTimeZone) {
		$this->siteTimeZone = $siteTimeZone;
		return $this;
	}

		public $templateSiteId;
	public function getTemplateSiteId() {
		return $this->templateSiteId;
	}
	
	public function setTemplateSiteId($templateSiteId) {
		$this->templateSiteId = $templateSiteId;
		return $this;
	}

	/**
	*The name of the theme used on the storefront.
	*/
	public $theme;
	public function getTheme() {
		return $this->theme;
	}
	
	public function setTheme($theme) {
		$this->theme = $theme;
		return $this;
	}

	/**
	*The name of the website to display on the storefront with no spaces.
	*/
	public $websiteName;
	public function getWebsiteName() {
		return $this->websiteName;
	}
	
	public function setWebsiteName($websiteName) {
		$this->websiteName = $websiteName;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. System-supplied and read-only.
	*/
	public $auditInfo;
	public function getAuditInfo() {
		return $this->auditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->auditInfo = $auditInfo;
		return $this;
	}

	/**
	*The territories configured for the site that are subject to sales tax.
	*/
	public $taxableTerritories;
	public function getTaxableTerritories() {
		return $this->taxableTerritories;
	}
	
	public function setTaxableTerritories($taxableTerritories) {
		$this->taxableTerritories = $taxableTerritories;
		return $this;
	}

}

?>

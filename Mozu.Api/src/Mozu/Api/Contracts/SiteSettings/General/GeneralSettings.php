<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\SiteSettings\General;



/**
*	General settings used on the storefront site.
*/
class GeneralSettings
{
	/**
	*If true, the site allows entry of addresses not verified by an address validation service.
	*/
	public $AllowInvalidAddresses;
	public function getAllowInvalidAddresses() {
		return $this->AllowInvalidAddresses;
	}
	
	public function setAllowInvalidAddresses($allowInvalidAddresses) {
		$this->AllowInvalidAddresses = $allowInvalidAddresses;
		return $this;
	}

	/**
	*The physical directory path or URL where the mobile favicon image file is stored. The favicon icon is generally 57x57 pixels. The icon appears on a mobile website or on the mobile device's OS Home.
	*/
	public $FavIconMobilePath;
	public function getFavIconMobilePath() {
		return $this->FavIconMobilePath;
	}
	
	public function setFavIconMobilePath($favIconMobilePath) {
		$this->FavIconMobilePath = $favIconMobilePath;
		return $this;
	}

	/**
	*The physical directory path or URL where the mobile favicon image file is stored. The favicon icon is generally 16x16 pixels. The icon appears on a a browser tab as the website's mini logo or on a browser address bar, or next to the page name in a list of bookmarks.
	*/
	public $FavIconPath;
	public function getFavIconPath() {
		return $this->FavIconPath;
	}
	
	public function setFavIconPath($favIconPath) {
		$this->FavIconPath = $favIconPath;
		return $this;
	}

	/**
	*The Google Analytics code associated with a particular store. This could be the web tracking code.
	*/
	public $GoogleAnalyticsCode;
	public function getGoogleAnalyticsCode() {
		return $this->GoogleAnalyticsCode;
	}
	
	public function setGoogleAnalyticsCode($googleAnalyticsCode) {
		$this->GoogleAnalyticsCode = $googleAnalyticsCode;
		return $this;
	}

	/**
	*If true, a service to verify addresses as valid is enabled for the site.
	*/
	public $IsAddressValidationEnabled;
	public function getIsAddressValidationEnabled() {
		return $this->IsAddressValidationEnabled;
	}
	
	public function setIsAddressValidationEnabled($isAddressValidationEnabled) {
		$this->IsAddressValidationEnabled = $isAddressValidationEnabled;
		return $this;
	}

	/**
	*If true, the Google analytics for eCommerce is enabled for this site. If false, the analytics are not enabled.
	*/
	public $IsGoogleAnalyticsEcommerceEnabled;
	public function getIsGoogleAnalyticsEcommerceEnabled() {
		return $this->IsGoogleAnalyticsEcommerceEnabled;
	}
	
	public function setIsGoogleAnalyticsEcommerceEnabled($isGoogleAnalyticsEcommerceEnabled) {
		$this->IsGoogleAnalyticsEcommerceEnabled = $isGoogleAnalyticsEcommerceEnabled;
		return $this;
	}

	/**
	*If true, enable Google analytics for this site. If false, analytics are not enabled.
	*/
	public $IsGoogleAnalyticsEnabled;
	public function getIsGoogleAnalyticsEnabled() {
		return $this->IsGoogleAnalyticsEnabled;
	}
	
	public function setIsGoogleAnalyticsEnabled($isGoogleAnalyticsEnabled) {
		$this->IsGoogleAnalyticsEnabled = $isGoogleAnalyticsEnabled;
		return $this;
	}

	/**
	*They physical directory path or URL where the website logo is stored.
	*/
	public $LogoPath;
	public function getLogoPath() {
		return $this->LogoPath;
	}
	
	public function setLogoPath($logoPath) {
		$this->LogoPath = $logoPath;
		return $this;
	}

	/**
	*The tagline or text that appears when hovering over the site logo.
	*/
	public $LogoText;
	public function getLogoText() {
		return $this->LogoText;
	}
	
	public function setLogoText($logoText) {
		$this->LogoText = $logoText;
		return $this;
	}

	/**
	*The mobile theme is the storefront name for the theme.
	*/
	public $MobileTheme;
	public function getMobileTheme() {
		return $this->MobileTheme;
	}
	
	public function setMobileTheme($mobileTheme) {
		$this->MobileTheme = $mobileTheme;
		return $this;
	}

	/**
	*Email address to display on email messages sent from the site.
	*/
	public $ReplyToEmailAddress;
	public function getReplyToEmailAddress() {
		return $this->ReplyToEmailAddress;
	}
	
	public function setReplyToEmailAddress($replyToEmailAddress) {
		$this->ReplyToEmailAddress = $replyToEmailAddress;
		return $this;
	}

	/**
	*Email address to set up so that shoppers and users browsing the site can use to contact the merchant.
	*/
	public $SenderEmailAddress;
	public function getSenderEmailAddress() {
		return $this->SenderEmailAddress;
	}
	
	public function setSenderEmailAddress($senderEmailAddress) {
		$this->SenderEmailAddress = $senderEmailAddress;
		return $this;
	}

	/**
	*Choose a format to use on the site: 12-hour (hh:mm:ss tt) or 24-hour format (HH:mm:ss).
	*/
	public $SiteTimeFormat;
	public function getSiteTimeFormat() {
		return $this->SiteTimeFormat;
	}
	
	public function setSiteTimeFormat($siteTimeFormat) {
		$this->SiteTimeFormat = $siteTimeFormat;
		return $this;
	}

	/**
	*Choose the time zone to use for the site.
	*/
	public $SiteTimeZone;
	public function getSiteTimeZone() {
		return $this->SiteTimeZone;
	}
	
	public function setSiteTimeZone($siteTimeZone) {
		$this->SiteTimeZone = $siteTimeZone;
		return $this;
	}

	/**
	*The name of the theme used on the storefront.
	*/
	public $Theme;
	public function getTheme() {
		return $this->Theme;
	}
	
	public function setTheme($theme) {
		$this->Theme = $theme;
		return $this;
	}

	/**
	*The name of the website to display on the storefront with no spaces.
	*/
	public $WebsiteName;
	public function getWebsiteName() {
		return $this->WebsiteName;
	}
	
	public function setWebsiteName($websiteName) {
		$this->WebsiteName = $websiteName;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*The territories configured for the site that are subject to sales tax.
	*/
	public $TaxableTerritories;
	public function getTaxableTerritories() {
		return $this->TaxableTerritories;
	}
	
	public function setTaxableTerritories($taxableTerritories) {
		$this->TaxableTerritories = $taxableTerritories;
		return $this;
	}

}

?>

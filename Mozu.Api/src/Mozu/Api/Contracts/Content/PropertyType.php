<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\Content;



/**
*	Property type available for content. Property types are like templates that can be reused.
*/
class PropertyType
{
	/**
	*Description of the content property type.
	*/
	public $description;
	public function getDescription() {
		return $this->description;
	}
	
	public function setDescription($description) {
		$this->description = $description;
		return $this;
	}

	/**
	*The display name of the content property type.
	*/
	public $displayName;
	public function getDisplayName() {
		return $this->displayName;
	}
	
	public function setDisplayName($displayName) {
		$this->displayName = $displayName;
		return $this;
	}

	/**
	*The template display details of the property type.
	*/
	public $displayTemplate;
	public function getDisplayTemplate() {
		return $this->displayTemplate;
	}
	
	public function setDisplayTemplate($displayTemplate) {
		$this->displayTemplate = $displayTemplate;
		return $this;
	}

	/**
	*The template edit details of the property type.
	*/
	public $editTemplate;
	public function getEditTemplate() {
		return $this->editTemplate;
	}
	
	public function setEditTemplate($editTemplate) {
		$this->editTemplate = $editTemplate;
		return $this;
	}

	/**
	*If true, this entity can be grouped.
	*/
	public $isAggregatable;
	public function getIsAggregatable() {
		return $this->isAggregatable;
	}
	
	public function setIsAggregatable($isAggregatable) {
		$this->isAggregatable = $isAggregatable;
		return $this;
	}

	/**
	*If true, the property type has several values. If false, the property type can only have one value.
	*/
	public $isMultiValued;
	public function getIsMultiValued() {
		return $this->isMultiValued;
	}
	
	public function setIsMultiValued($isMultiValued) {
		$this->isMultiValued = $isMultiValued;
		return $this;
	}

	/**
	*If true, the entity can be searched. If false, the entity cannot be searched.
	*/
	public $isQueryable;
	public function getIsQueryable() {
		return $this->isQueryable;
	}
	
	public function setIsQueryable($isQueryable) {
		$this->isQueryable = $isQueryable;
		return $this;
	}

	/**
	*If true, the entity is required for the request to return a valid response.
	*/
	public $isRequired;
	public function getIsRequired() {
		return $this->isRequired;
	}
	
	public function setIsRequired($isRequired) {
		$this->isRequired = $isRequired;
		return $this;
	}

	/**
	*If true, the property type results are sortable. If false, the property type results cannot be sorted by any options.
	*/
	public $isSortable;
	public function getIsSortable() {
		return $this->isSortable;
	}
	
	public function setIsSortable($isSortable) {
		$this->isSortable = $isSortable;
		return $this;
	}

	/**
	*The name of the content property type.
	*/
	public $name;
	public function getName() {
		return $this->name;
	}
	
	public function setName($name) {
		$this->name = $name;
		return $this;
	}

	/**
	*Regular expression used for data validation.
	*/
	public $regex;
	public function getRegex() {
		return $this->regex;
	}
	
	public function setRegex($regex) {
		$this->regex = $regex;
		return $this;
	}

	/**
	*List of content entity descriptions localized to the site or site group's default language.
	*/
	public $localizedDescriptions;
	public function getLocalizedDescriptions() {
		return $this->localizedDescriptions;
	}
	
	public function setLocalizedDescriptions($localizedDescriptions) {
		$this->localizedDescriptions = $localizedDescriptions;
		return $this;
	}

	/**
	*List of content entity display names localized to the site or site group's default language.
	*/
	public $localizedDisplayNames;
	public function getLocalizedDisplayNames() {
		return $this->localizedDisplayNames;
	}
	
	public function setLocalizedDisplayNames($localizedDisplayNames) {
		$this->localizedDisplayNames = $localizedDisplayNames;
		return $this;
	}

	/**
	*Wrapper for property value type.
	*/
	public $propertyValueType;
	public function getPropertyValueType() {
		return $this->propertyValueType;
	}
	
	public function setPropertyValueType($propertyValueType) {
		$this->propertyValueType = $propertyValueType;
		return $this;
	}

}

?>

<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Properties of the category, price, or attribute facet shoppers use to filter product display results on a storefront.
*/
class Facet
{
	/**
	*Unique identifier for the storefront container used to organize products.
	*/
	public $CategoryId;
	public function getCategoryId() {
		return $this->CategoryId;
	}
	
	public function setCategoryId($categoryId) {
		$this->CategoryId = $categoryId;
		return $this;
	}

	/**
	*Unique identifier of the facet.
	*/
	public $FacetId;
	public function getFacetId() {
		return $this->FacetId;
	}
	
	public function setFacetId($facetId) {
		$this->FacetId = $facetId;
		return $this;
	}

	/**
	*The type of facet. Valid values are "range," which enables creation of a range of values, or "value," which populates the facet values based on the associated attribute or category.
	*/
	public $FacetType;
	public function getFacetType() {
		return $this->FacetType;
	}
	
	public function setFacetType($facetType) {
		$this->FacetType = $facetType;
		return $this;
	}

	/**
	*If true, disables a facet inherited from a parent category.
	*/
	public $IsHidden;
	public function getIsHidden() {
		return $this->IsHidden;
	}
	
	public function setIsHidden($isHidden) {
		$this->IsHidden = $isHidden;
		return $this;
	}

	/**
	*The numeric sequence of the facet for its associated category.
	*/
	public $Order;
	public function getOrder() {
		return $this->Order;
	}
	
	public function setOrder($order) {
		$this->Order = $order;
		return $this;
	}

	/**
	*Overrides a facet inherited from a parent category for a specified subcategory. System-supplied and read only.
	*/
	public $OverrideFacetId;
	public function getOverrideFacetId() {
		return $this->OverrideFacetId;
	}
	
	public function setOverrideFacetId($overrideFacetId) {
		$this->OverrideFacetId = $overrideFacetId;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*For range type facets, an array of ranges to use for the facet values. For example, a price facet might have range queries for $0-$25, $25-$50, and $50-$100.
	*/
	public $RangeQueries;
	public function getRangeQueries() {
		return $this->RangeQueries;
	}
	
	public function setRangeQueries($rangeQueries) {
		$this->RangeQueries = $rangeQueries;
		return $this;
	}

	/**
	*Container for the facet source information, which includes the category, price, or attribute properties.
	*/
	public $Source;
	public function getSource() {
		return $this->Source;
	}
	
	public function setSource($source) {
		$this->Source = $source;
		return $this;
	}

	/**
	*System-supplied and read only parameter that validates a facet for its associated category.
	*/
	public $Validity;
	public function getValidity() {
		return $this->Validity;
	}
	
	public function setValidity($validity) {
		$this->Validity = $validity;
		return $this;
	}

}

?>

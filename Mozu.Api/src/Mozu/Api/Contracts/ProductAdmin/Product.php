<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Properties of the product such as product code, product name, and product price.
*/
class Product
{
	/**
	*Merchant-generated product code for the product that any variation stems from.
	*/
	public $baseProductCode;
	public function getBaseProductCode() {
		return $this->baseProductCode;
	}
	
	public function setBaseProductCode($baseProductCode) {
		$this->baseProductCode = $baseProductCode;
		return $this;
	}

	/**
	*If true, the product has configurable options. This option means that a product is not purchasable until the shopper selects options that resolve into a product variation. Configurable options for a product are the choices a shopper makes when ordering a product. Size and color are configurable options. System-supplied and read-only.
	*/
	public $hasConfigurableOptions;
	public function getHasConfigurableOptions() {
		return $this->hasConfigurableOptions;
	}
	
	public function setHasConfigurableOptions($hasConfigurableOptions) {
		$this->hasConfigurableOptions = $hasConfigurableOptions;
		return $this;
	}

	/**
	*If true, this product has stand alone options that a shopper can select which can exist without product variations. Stand alone options. System-supplied and read-only.
	*/
	public $hasStandAloneOptions;
	public function getHasStandAloneOptions() {
		return $this->hasStandAloneOptions;
	}
	
	public function setHasStandAloneOptions($hasStandAloneOptions) {
		$this->hasStandAloneOptions = $hasStandAloneOptions;
		return $this;
	}

	/**
	*If true, the product must be packaged on its own and should not be jointly packaged with other products.
	*/
	public $isPackagedStandAlone;
	public function getIsPackagedStandAlone() {
		return $this->isPackagedStandAlone;
	}
	
	public function setIsPackagedStandAlone($isPackagedStandAlone) {
		$this->isPackagedStandAlone = $isPackagedStandAlone;
		return $this;
	}

	/**
	*If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	public $isRecurring;
	public function getIsRecurring() {
		return $this->isRecurring;
	}
	
	public function setIsRecurring($isRecurring) {
		$this->isRecurring = $isRecurring;
		return $this;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	public $isTaxable;
	public function getIsTaxable() {
		return $this->isTaxable;
	}
	
	public function setIsTaxable($isTaxable) {
		$this->isTaxable = $isTaxable;
		return $this;
	}

	/**
	*If true, the entity is valid for the product type provided.
	*/
	public $isValidForProductType;
	public function getIsValidForProductType() {
		return $this->isValidForProductType;
	}
	
	public function setIsValidForProductType($isValidForProductType) {
		$this->isValidForProductType = $isValidForProductType;
		return $this;
	}

	/**
	*If true, the product in this request is a product variation of a product that has configurable options. System-supplied and read-only.
	*/
	public $isVariation;
	public function getIsVariation() {
		return $this->isVariation;
	}
	
	public function setIsVariation($isVariation) {
		$this->isVariation = $isVariation;
		return $this;
	}

		public $masterCatalogId;
	public function getMasterCatalogId() {
		return $this->masterCatalogId;
	}
	
	public function setMasterCatalogId($masterCatalogId) {
		$this->masterCatalogId = $masterCatalogId;
		return $this;
	}

	/**
	*"Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only."
	*/
	public $productCode;
	public function getProductCode() {
		return $this->productCode;
	}
	
	public function setProductCode($productCode) {
		$this->productCode = $productCode;
		return $this;
	}

		public $productSequence;
	public function getProductSequence() {
		return $this->productSequence;
	}
	
	public function setProductSequence($productSequence) {
		$this->productSequence = $productSequence;
		return $this;
	}

	/**
	*Identifier of the product type.
	*/
	public $productTypeId;
	public function getProductTypeId() {
		return $this->productTypeId;
	}
	
	public function setProductTypeId($productTypeId) {
		$this->productTypeId = $productTypeId;
		return $this;
	}

		public $productUsage;
	public function getProductUsage() {
		return $this->productUsage;
	}
	
	public function setProductUsage($productUsage) {
		$this->productUsage = $productUsage;
		return $this;
	}

	/**
	*Identifier of the shipping class.
	*/
	public $shippingClassId;
	public function getShippingClassId() {
		return $this->shippingClassId;
	}
	
	public function setShippingClassId($shippingClassId) {
		$this->shippingClassId = $shippingClassId;
		return $this;
	}

	/**
	*If the product must be packaged separately, the type of standalone package to use.
	*/
	public $standAlonePackageType;
	public function getStandAlonePackageType() {
		return $this->standAlonePackageType;
	}
	
	public function setStandAlonePackageType($standAlonePackageType) {
		$this->standAlonePackageType = $standAlonePackageType;
		return $this;
	}

	/**
	*The universal product code (UPC code) of the product.
	*/
	public $upc;
	public function getUpc() {
		return $this->upc;
	}
	
	public function setUpc($upc) {
		$this->upc = $upc;
		return $this;
	}

	/**
	*System-generated key that represents the attribute values that uniquely identify a specific product variation.
	*/
	public $variationKey;
	public function getVariationKey() {
		return $this->variationKey;
	}
	
	public function setVariationKey($variationKey) {
		$this->variationKey = $variationKey;
		return $this;
	}

	/**
	*The list of extras set up in product admin.
	*/
	public $extras;
	public function getExtras() {
		return $this->extras;
	}
	
	public function setExtras($extras) {
		$this->extras = $extras;
		return $this;
	}

	/**
	*List of discounts available for a product.
	*/
	public $applicableDiscounts;
	public function getApplicableDiscounts() {
		return $this->applicableDiscounts;
	}
	
	public function setApplicableDiscounts($applicableDiscounts) {
		$this->applicableDiscounts = $applicableDiscounts;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. System-supplied and read-only.
	*/
	public $auditInfo;
	public function getAuditInfo() {
		return $this->auditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->auditInfo = $auditInfo;
		return $this;
	}

		public $bundledProducts;
	public function getBundledProducts() {
		return $this->bundledProducts;
	}
	
	public function setBundledProducts($bundledProducts) {
		$this->bundledProducts = $bundledProducts;
		return $this;
	}

	/**
	*Product content set in product admin.
	*/
	public $content;
	public function getContent() {
		return $this->content;
	}
	
	public function setContent($content) {
		$this->content = $content;
		return $this;
	}

		public $inventoryInfo;
	public function getInventoryInfo() {
		return $this->inventoryInfo;
	}
	
	public function setInventoryInfo($inventoryInfo) {
		$this->inventoryInfo = $inventoryInfo;
		return $this;
	}

	/**
	*The list of options set up in product admin.
	*/
	public $options;
	public function getOptions() {
		return $this->options;
	}
	
	public function setOptions($options) {
		$this->options = $options;
		return $this;
	}

	/**
	*Height of the package in imperial units of feet and inches.
	*/
	public $packageHeight;
	public function getPackageHeight() {
		return $this->packageHeight;
	}
	
	public function setPackageHeight($packageHeight) {
		$this->packageHeight = $packageHeight;
		return $this;
	}

	/**
	*Length of the package in imperial units of feet and inches.
	*/
	public $packageLength;
	public function getPackageLength() {
		return $this->packageLength;
	}
	
	public function setPackageLength($packageLength) {
		$this->packageLength = $packageLength;
		return $this;
	}

	/**
	*Weight of the package in imperial units of pounds and ounces.
	*/
	public $packageWeight;
	public function getPackageWeight() {
		return $this->packageWeight;
	}
	
	public function setPackageWeight($packageWeight) {
		$this->packageWeight = $packageWeight;
		return $this;
	}

	/**
	*Width of the package in imperial units of feet and inches.
	*/
	public $packageWidth;
	public function getPackageWidth() {
		return $this->packageWidth;
	}
	
	public function setPackageWidth($packageWidth) {
		$this->packageWidth = $packageWidth;
		return $this;
	}

		public $price;
	public function getPrice() {
		return $this->price;
	}
	
	public function setPrice($price) {
		$this->price = $price;
		return $this;
	}

		public $productInCatalogs;
	public function getProductInCatalogs() {
		return $this->productInCatalogs;
	}
	
	public function setProductInCatalogs($productInCatalogs) {
		$this->productInCatalogs = $productInCatalogs;
		return $this;
	}

	/**
	*The list of product properties to set in product admin.
	*/
	public $properties;
	public function getProperties() {
		return $this->properties;
	}
	
	public function setProperties($properties) {
		$this->properties = $properties;
		return $this;
	}

		public $publishingInfo;
	public function getPublishingInfo() {
		return $this->publishingInfo;
	}
	
	public function setPublishingInfo($publishingInfo) {
		$this->publishingInfo = $publishingInfo;
		return $this;
	}

	/**
	*search engine optimized product content.
	*/
	public $seoContent;
	public function getSeoContent() {
		return $this->seoContent;
	}
	
	public function setSeoContent($seoContent) {
		$this->seoContent = $seoContent;
		return $this;
	}

	/**
	*The list of product variation options that exist in product admin.
	*/
	public $variationOptions;
	public function getVariationOptions() {
		return $this->variationOptions;
	}
	
	public function setVariationOptions($variationOptions) {
		$this->variationOptions = $variationOptions;
		return $this;
	}

}

?>

<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Details of an attribute used to describe individual aspects of a product.
*/
class Attribute
{
	/**
	*The administrative name of the product attribute as it appears in Mozu Admin.
	*/
	public $AdminName;
	public function getAdminName() {
		return $this->AdminName;
	}
	
	public function setAdminName($adminName) {
		$this->AdminName = $adminName;
		return $this;
	}

	/**
	*Merchant-defined identifier of the product attribute used to generate the attribute's fully qualified name.
	*/
	public $AttributeCode;
	public function getAttributeCode() {
		return $this->AttributeCode;
	}
	
	public function setAttributeCode($attributeCode) {
		$this->AttributeCode = $attributeCode;
		return $this;
	}

	/**
	*Generated sequence that increments for each attribute and data type combination created. This value is system-supplied and read-only.
	*/
	public $AttributeDataTypeSequence;
	public function getAttributeDataTypeSequence() {
		return $this->AttributeDataTypeSequence;
	}
	
	public function setAttributeDataTypeSequence($attributeDataTypeSequence) {
		$this->AttributeDataTypeSequence = $attributeDataTypeSequence;
		return $this;
	}

	/**
	*The fully qualified name of the attribute, which is a user defined attribute identifier.
	*/
	public $AttributeFQN;
	public function getAttributeFQN() {
		return $this->AttributeFQN;
	}
	
	public function setAttributeFQN($attributeFQN) {
		$this->AttributeFQN = $attributeFQN;
		return $this;
	}

	/**
	*Generated sequence that increments for each product attribute created. This value is system-supplied and read-only.
	*/
	public $AttributeSequence;
	public function getAttributeSequence() {
		return $this->AttributeSequence;
	}
	
	public function setAttributeSequence($attributeSequence) {
		$this->AttributeSequence = $attributeSequence;
		return $this;
	}

	/**
	*The data type of the product attribute, which is a Bool, DateTime, Number, or String. The attribute's data type cannot be changed.
	*/
	public $DataType;
	public function getDataType() {
		return $this->DataType;
	}
	
	public function setDataType($dataType) {
		$this->DataType = $dataType;
		return $this;
	}

	/**
	*The storefront interface input type for the product attribute, which is a Date, DateTime, List, TextArea, TextBox, or YesNo. The attribute's input type cannot be changed.
	*/
	public $InputType;
	public function getInputType() {
		return $this->InputType;
	}
	
	public function setInputType($inputType) {
		$this->InputType = $inputType;
		return $this;
	}

	/**
	*If true, the product attribute is an add-on configuration made by the shopper that does not represent a product variation, such as a monogram.
	*/
	public $IsExtra;
	public function getIsExtra() {
		return $this->IsExtra;
	}
	
	public function setIsExtra($isExtra) {
		$this->IsExtra = $isExtra;
		return $this;
	}

	/**
	*If true, the product attribute is a merchant- or shopper-configurable option, such as size or color, that represents a product variation.
	*/
	public $IsOption;
	public function getIsOption() {
		return $this->IsOption;
	}
	
	public function setIsOption($isOption) {
		$this->IsOption = $isOption;
		return $this;
	}

	/**
	*If true, the product attribute describes aspects of the product that do not represent an option configurable by the shopper, such as screen resolution or brand.
	*/
	public $IsProperty;
	public function getIsProperty() {
		return $this->IsProperty;
	}
	
	public function setIsProperty($isProperty) {
		$this->IsProperty = $isProperty;
		return $this;
	}

	/**
	*If applicable, the registered namespace associated with the product attribute, used to generate the fully qualified name. If no namespace is defined, the namespace associated with the tenant is automatically assigned.
	*/
	public $Namespace;
	public function getNamespace() {
		return $this->Namespace;
	}
	
	public function setNamespace($namespace) {
		$this->Namespace = $namespace;
		return $this;
	}

		public $SiteGroupId;
	public function getSiteGroupId() {
		return $this->SiteGroupId;
	}
	
	public function setSiteGroupId($siteGroupId) {
		$this->SiteGroupId = $siteGroupId;
		return $this;
	}

	/**
	*The type of value associated with the product attribute, which is ShopperEntered (the shopper selects or enters an attribute value during checkout), Predefined (the merchant sets the attribute value from a list during product attribute definition), or AdminEntered (the merchant selects or enters a value during product definition). The attribute value type cannot be changed.
	*/
	public $ValueType;
	public function getValueType() {
		return $this->ValueType;
	}
	
	public function setValueType($valueType) {
		$this->ValueType = $valueType;
		return $this;
	}

	/**
	*List of key-value pairs that store metadata associated with the product attribute.
	*/
	public $AttributeMetadata;
	public function getAttributeMetadata() {
		return $this->AttributeMetadata;
	}
	
	public function setAttributeMetadata($attributeMetadata) {
		$this->AttributeMetadata = $attributeMetadata;
		return $this;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	public $AuditInfo;
	public function getAuditInfo() {
		return $this->AuditInfo;
	}
	
	public function setAuditInfo($auditInfo) {
		$this->AuditInfo = $auditInfo;
		return $this;
	}

	/**
	*Complex type that contains content for a language specified by LocaleCode.
	*/
	public $Content;
	public function getContent() {
		return $this->Content;
	}
	
	public function setContent($content) {
		$this->Content = $content;
		return $this;
	}

	/**
	*Properties of the validation of a product attribute, which contains rules that dictate what values are valid entries for product attributes.
	*/
	public $Validation;
	public function getValidation() {
		return $this->Validation;
	}
	
	public function setValidation($validation) {
		$this->Validation = $validation;
		return $this;
	}

	/**
	*Array list of the defined vocabulary values for the specified product attribute. For example, for a Color attribute, vocabulary values might include black, white, and purple.
	*/
	public $VocabularyValues;
	public function getVocabularyValues() {
		return $this->VocabularyValues;
	}
	
	public function setVocabularyValues($vocabularyValues) {
		$this->VocabularyValues = $vocabularyValues;
		return $this;
	}

}

?>

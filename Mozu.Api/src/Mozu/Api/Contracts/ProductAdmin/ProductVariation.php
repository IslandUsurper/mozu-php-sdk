<?php

/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/


namespace Mozu\Api\Contracts\ProductAdmin;



/**
*	Properties of a specific product variation.
*/
class ProductVariation
{
	/**
	*The difference between the base weight for a product and this variation of the product, which can be a positive or negative decimal value.
	*/
	public $DeltaWeight;
	public function getDeltaWeight() {
		return $this->DeltaWeight;
	}
	
	public function setDeltaWeight($deltaWeight) {
		$this->DeltaWeight = $deltaWeight;
		return $this;
	}

	/**
	*If true, this variation of this product is marked available for sale.
	*/
	public $IsActive;
	public function getIsActive() {
		return $this->IsActive;
	}
	
	public function setIsActive($isActive) {
		$this->IsActive = $isActive;
		return $this;
	}

	/**
	*If true, the production variation is no longer available for sale. For example, if a merchant stops selling all "small" shirts, all product variations with the "small" option are set to IsOrphan. System-supplied and read-only.
	*/
	public $IsOrphan;
	public function getIsOrphan() {
		return $this->IsOrphan;
	}
	
	public function setIsOrphan($isOrphan) {
		$this->IsOrphan = $isOrphan;
		return $this;
	}

	/**
	*The number of product variations currently available in inventory.
	*/
	public $StockOnHand;
	public function getStockOnHand() {
		return $this->StockOnHand;
	}
	
	public function setStockOnHand($stockOnHand) {
		$this->StockOnHand = $stockOnHand;
		return $this;
	}

	/**
	*The number of product variations that are unavailable for current purchase, but placed on back order so that the shopper's order can still be fulfilled, for example, by dropshipping or just waiting for stock to be available again.
	*/
	public $StockOnOrder;
	public function getStockOnOrder() {
		return $this->StockOnOrder;
	}
	
	public function setStockOnOrder($stockOnOrder) {
		$this->StockOnOrder = $stockOnOrder;
		return $this;
	}

	/**
	*If true, one or more product variations are configured for the specified product code.
	*/
	public $VariationExists;
	public function getVariationExists() {
		return $this->VariationExists;
	}
	
	public function setVariationExists($variationExists) {
		$this->VariationExists = $variationExists;
		return $this;
	}

	/**
	*System-generated key that represents the attribute values that uniquely identify a specific product variation.
	*/
	public $Variationkey;
	public function getVariationkey() {
		return $this->Variationkey;
	}
	
	public function setVariationkey($variationkey) {
		$this->Variationkey = $variationkey;
		return $this;
	}

	/**
	*Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	*/
	public $VariationProductCode;
	public function getVariationProductCode() {
		return $this->VariationProductCode;
	}
	
	public function setVariationProductCode($variationProductCode) {
		$this->VariationProductCode = $variationProductCode;
		return $this;
	}

	/**
	*The difference between the base price for the product and this variation of the product, which can be a positive or negative decimal value. For example, if the base price for a t-shirt product is $10, but the XL variation should cost $12, the DeltaPrice value should be "2". However, if the XS variation should only cost $8, the DeltaPrice value should be "-2".
	*/
	public $DeltaPrice;
	public function getDeltaPrice() {
		return $this->DeltaPrice;
	}
	
	public function setDeltaPrice($deltaPrice) {
		$this->DeltaPrice = $deltaPrice;
		return $this;
	}

	/**
	*Wrapper for the list of option attributes configured for the product variation.
	*/
	public $Options;
	public function getOptions() {
		return $this->Options;
	}
	
	public function setOptions($options) {
		$this->Options = $options;
		return $this;
	}

	/**
	*The change made to the number of product variations currently available in inventory.
	*/
	public $StockOnHandAdjustment;
	public function getStockOnHandAdjustment() {
		return $this->StockOnHandAdjustment;
	}
	
	public function setStockOnHandAdjustment($stockOnHandAdjustment) {
		$this->StockOnHandAdjustment = $stockOnHandAdjustment;
		return $this;
	}

}

?>
